
hello.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
   0:	00 10 00 10 0d 01 00 00 d5 00 00 00 d9 00 00 00     ................
	...
  2c:	dd 00 00 00 00 00 00 00 00 00 00 00 e1 00 00 00     ................
  3c:	01 03 00 00 51 01 00 00 51 01 00 00 51 01 00 00     ....Q...Q...Q...
  4c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
  5c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
  6c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
  7c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
  8c:	51 01 00 00 51 01 00 00 c9 05 00 00 00 00 00 00     Q...Q...........
  9c:	00 00 00 00 51 01 00 00 51 01 00 00 51 01 00 00     ....Q...Q...Q...
  ac:	00 00 00 00 51 01 00 00 51 01 00 00 51 01 00 00     ....Q...Q...Q...
  bc:	51 01 00 00                                         Q...

000000c0 <__data_section_table>:
  c0:	00000860 	.word	0x00000860
  c4:	10000000 	.word	0x10000000
  c8:	0000000c 	.word	0x0000000c

000000cc <__bss_section_table>:
  cc:	1000000c 	.word	0x1000000c
  d0:	00000054 	.word	0x00000054

000000d4 <NMI_Handler>:
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void)
{
  d4:	b500      	push	{lr}
  d6:	e7fe      	b.n	d6 <NMI_Handler+0x2>

000000d8 <HardFault_Handler>:
    {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void)
{
  d8:	b500      	push	{lr}
  da:	e7fe      	b.n	da <HardFault_Handler+0x2>

000000dc <SVC_Handler>:
    {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void)
{
  dc:	b500      	push	{lr}
  de:	e7fe      	b.n	de <SVC_Handler+0x2>

000000e0 <PendSV_Handler>:
    {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void)
{
  e0:	b500      	push	{lr}
  e2:	e7fe      	b.n	e2 <PendSV_Handler+0x2>
    {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void)
{
  e4:	b500      	push	{lr}
  e6:	e7fe      	b.n	e6 <PendSV_Handler+0x6>

000000e8 <data_init>:
// are written as separate functions rather than being inlined within the
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
  e8:	b510      	push	{r4, lr}
	unsigned int *pulDest = (unsigned int*) start;
	unsigned int *pulSrc = (unsigned int*) romstart;
	unsigned int loop;
	for (loop = 0; loop < len; loop = loop + 4)
  ea:	2300      	movs	r3, #0
  ec:	e002      	b.n	f4 <data_init+0xc>
		*pulDest++ = *pulSrc++;
  ee:	581c      	ldr	r4, [r3, r0]
__attribute__ ((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
	unsigned int *pulDest = (unsigned int*) start;
	unsigned int *pulSrc = (unsigned int*) romstart;
	unsigned int loop;
	for (loop = 0; loop < len; loop = loop + 4)
  f0:	3304      	adds	r3, #4
		*pulDest++ = *pulSrc++;
  f2:	c110      	stmia	r1!, {r4}
__attribute__ ((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
	unsigned int *pulDest = (unsigned int*) start;
	unsigned int *pulSrc = (unsigned int*) romstart;
	unsigned int loop;
	for (loop = 0; loop < len; loop = loop + 4)
  f4:	4293      	cmp	r3, r2
  f6:	d3fa      	bcc.n	ee <data_init+0x6>
		*pulDest++ = *pulSrc++;
}
  f8:	bd10      	pop	{r4, pc}

000000fa <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
  fa:	b510      	push	{r4, lr}
	unsigned int *pulDest = (unsigned int*) start;
  fc:	1c03      	adds	r3, r0, #0
	unsigned int loop;
	for (loop = 0; loop < len; loop = loop + 4)
		*pulDest++ = 0;
  fe:	2200      	movs	r2, #0

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
	unsigned int *pulDest = (unsigned int*) start;
	unsigned int loop;
	for (loop = 0; loop < len; loop = loop + 4)
 100:	e000      	b.n	104 <bss_init+0xa>
		*pulDest++ = 0;
 102:	c304      	stmia	r3!, {r2}

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
	unsigned int *pulDest = (unsigned int*) start;
	unsigned int loop;
	for (loop = 0; loop < len; loop = loop + 4)
 104:	1a1c      	subs	r4, r3, r0
 106:	428c      	cmp	r4, r1
 108:	d3fb      	bcc.n	102 <bss_init+0x8>
		*pulDest++ = 0;
}
 10a:	bd10      	pop	{r4, pc}

0000010c <ResetISR>:
// Sets up a simple runtime environment and initializes the C/C++
// library.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void
ResetISR(void) {
 10c:	b538      	push	{r3, r4, r5, lr}
    //
	unsigned int LoadAddr, ExeAddr, SectionLen;
	unsigned int *SectionTableAddr;

	// Load base address of Global Section Table
	SectionTableAddr = &__data_section_table;
 10e:	4c0d      	ldr	r4, [pc, #52]	; (144 <ResetISR+0x38>)

    // Copy the data sections from flash to SRAM.
	while (SectionTableAddr < &__data_section_table_end) {
 110:	4d0d      	ldr	r5, [pc, #52]	; (148 <ResetISR+0x3c>)
 112:	e005      	b.n	120 <ResetISR+0x14>
		LoadAddr = *SectionTableAddr++;
 114:	6820      	ldr	r0, [r4, #0]
		ExeAddr = *SectionTableAddr++;
 116:	6861      	ldr	r1, [r4, #4]
		SectionLen = *SectionTableAddr++;
 118:	68a2      	ldr	r2, [r4, #8]
// Sets up a simple runtime environment and initializes the C/C++
// library.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void
ResetISR(void) {
 11a:	340c      	adds	r4, #12
    // Copy the data sections from flash to SRAM.
	while (SectionTableAddr < &__data_section_table_end) {
		LoadAddr = *SectionTableAddr++;
		ExeAddr = *SectionTableAddr++;
		SectionLen = *SectionTableAddr++;
		data_init(LoadAddr, ExeAddr, SectionLen);
 11c:	f7ff ffe4 	bl	e8 <data_init>

	// Load base address of Global Section Table
	SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
	while (SectionTableAddr < &__data_section_table_end) {
 120:	42ac      	cmp	r4, r5
 122:	d3f7      	bcc.n	114 <ResetISR+0x8>
 124:	e005      	b.n	132 <ResetISR+0x26>
		data_init(LoadAddr, ExeAddr, SectionLen);
	}
	// At this point, SectionTableAddr = &__bss_section_table;
	// Zero fill the bss segment
	while (SectionTableAddr < &__bss_section_table_end) {
		ExeAddr = *SectionTableAddr++;
 126:	6820      	ldr	r0, [r4, #0]
		SectionLen = *SectionTableAddr++;
 128:	6861      	ldr	r1, [r4, #4]
// Sets up a simple runtime environment and initializes the C/C++
// library.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void
ResetISR(void) {
 12a:	3408      	adds	r4, #8
	// At this point, SectionTableAddr = &__bss_section_table;
	// Zero fill the bss segment
	while (SectionTableAddr < &__bss_section_table_end) {
		ExeAddr = *SectionTableAddr++;
		SectionLen = *SectionTableAddr++;
		bss_init(ExeAddr, SectionLen);
 12c:	f7ff ffe5 	bl	fa <bss_init>
 130:	e000      	b.n	134 <ResetISR+0x28>
		SectionLen = *SectionTableAddr++;
		data_init(LoadAddr, ExeAddr, SectionLen);
	}
	// At this point, SectionTableAddr = &__bss_section_table;
	// Zero fill the bss segment
	while (SectionTableAddr < &__bss_section_table_end) {
 132:	4d06      	ldr	r5, [pc, #24]	; (14c <ResetISR+0x40>)
 134:	42ac      	cmp	r4, r5
 136:	d3f6      	bcc.n	126 <ResetISR+0x1a>
	SectionLen = (void*)EndAddr - (void*)ExeAddr;
	bss_init ((unsigned int)ExeAddr, SectionLen);
#endif

#ifdef __USE_CMSIS
	SystemInit();
 138:	f000 fb0c 	bl	754 <SystemInit>
	__libc_init_array();
#endif

#if defined (__REDLIB__)
	// Call the Redlib library, which in turn calls main()
	__main() ;
 13c:	f000 fb52 	bl	7e4 <__weak_main>
 140:	e7fe      	b.n	140 <ResetISR+0x34>
 142:	46c0      	nop			; (mov r8, r8)
 144:	000000c0 	.word	0x000000c0
 148:	000000cc 	.word	0x000000cc
 14c:	000000d4 	.word	0x000000d4

00000150 <ADC_IRQHandler>:
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void)
{
 150:	b500      	push	{lr}
 152:	e7fe      	b.n	152 <ADC_IRQHandler+0x2>
 154:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 158:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 15c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 160:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 164:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 168:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 16c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 170:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 174:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 178:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 17c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 180:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 184:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 188:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 18c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 190:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 194:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 198:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 19c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 20c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 21c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 22c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 23c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 24c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 25c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 26c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 27c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 28c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 29c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000002fc <CRP_WORD>:
 2fc:	ffff ffff                                   ....

00000300 <SysTick_Handler>:
extern volatile uint8_t UARTBuffer[BUFSIZE];

// TImer OSC
volatile unsigned int Frequency = 65535; // lower is higher

void SysTick_Handler (void) {           /* SysTick Interrupt Handler (~1ms)    */
 300:	b510      	push	{r4, lr}
	SysTickCnt++;
 302:	4b1a      	ldr	r3, [pc, #104]	; (36c <SysTick_Handler+0x6c>)
 304:	681a      	ldr	r2, [r3, #0]
 306:	3201      	adds	r2, #1
 308:	601a      	str	r2, [r3, #0]
	if (IRQTickCnt >= 100) {
 30a:	4b19      	ldr	r3, [pc, #100]	; (370 <SysTick_Handler+0x70>)
 30c:	681a      	ldr	r2, [r3, #0]
 30e:	2a63      	cmp	r2, #99	; 0x63
 310:	d908      	bls.n	324 <SysTick_Handler+0x24>
		LPC_GPIO0->DATA ^= (1<<7); /* toggle GPIOX_X */
 312:	4a18      	ldr	r2, [pc, #96]	; (374 <SysTick_Handler+0x74>)
 314:	21a0      	movs	r1, #160	; 0xa0
 316:	05c9      	lsls	r1, r1, #23
 318:	5888      	ldr	r0, [r1, r2]
 31a:	2480      	movs	r4, #128	; 0x80
 31c:	4060      	eors	r0, r4
 31e:	5088      	str	r0, [r1, r2]
		IRQTickCnt = 0;
 320:	2200      	movs	r2, #0
 322:	601a      	str	r2, [r3, #0]
	}
	IRQTickCnt++;
 324:	681a      	ldr	r2, [r3, #0]
 326:	4914      	ldr	r1, [pc, #80]	; (378 <SysTick_Handler+0x78>)
 328:	3201      	adds	r2, #1
 32a:	601a      	str	r2, [r3, #0]
	uint16_t decr = 392;


	if (LPC_TMR16B0->MR0 >= decr ) {LPC_TMR16B0->MR0 -= decr;} else { LPC_TMR16B0->MR0 = 0;}
 32c:	4b13      	ldr	r3, [pc, #76]	; (37c <SysTick_Handler+0x7c>)
 32e:	699a      	ldr	r2, [r3, #24]
 330:	428a      	cmp	r2, r1
 332:	d903      	bls.n	33c <SysTick_Handler+0x3c>
 334:	699a      	ldr	r2, [r3, #24]
 336:	3a89      	subs	r2, #137	; 0x89
 338:	3aff      	subs	r2, #255	; 0xff
 33a:	e000      	b.n	33e <SysTick_Handler+0x3e>
 33c:	2200      	movs	r2, #0
 33e:	619a      	str	r2, [r3, #24]
	if (LPC_TMR16B0->MR1 >= decr ) {LPC_TMR16B0->MR1 -= decr;} else { LPC_TMR16B0->MR1 = 0;}
 340:	69d8      	ldr	r0, [r3, #28]
 342:	4a0e      	ldr	r2, [pc, #56]	; (37c <SysTick_Handler+0x7c>)
 344:	4288      	cmp	r0, r1
 346:	d903      	bls.n	350 <SysTick_Handler+0x50>
 348:	69d0      	ldr	r0, [r2, #28]
 34a:	3889      	subs	r0, #137	; 0x89
 34c:	38ff      	subs	r0, #255	; 0xff
 34e:	e000      	b.n	352 <SysTick_Handler+0x52>
 350:	2000      	movs	r0, #0
 352:	61d0      	str	r0, [r2, #28]
	if (LPC_TMR16B0->MR2 >= decr ) {LPC_TMR16B0->MR2 -= decr;} else { LPC_TMR16B0->MR2 = 0;}
 354:	6a1b      	ldr	r3, [r3, #32]
 356:	4a09      	ldr	r2, [pc, #36]	; (37c <SysTick_Handler+0x7c>)
 358:	428b      	cmp	r3, r1
 35a:	d903      	bls.n	364 <SysTick_Handler+0x64>
 35c:	6a13      	ldr	r3, [r2, #32]
 35e:	3b89      	subs	r3, #137	; 0x89
 360:	3bff      	subs	r3, #255	; 0xff
 362:	e000      	b.n	366 <SysTick_Handler+0x66>
 364:	2300      	movs	r3, #0
 366:	6213      	str	r3, [r2, #32]
}
 368:	bd10      	pop	{r4, pc}
 36a:	46c0      	nop			; (mov r8, r8)
 36c:	10000010 	.word	0x10000010
 370:	1000000c 	.word	0x1000000c
 374:	00003ffc 	.word	0x00003ffc
 378:	00000187 	.word	0x00000187
 37c:	4000c000 	.word	0x4000c000

00000380 <LEDinit>:
  //unsigned long tick_cnt = tick;
  systick = SysTickCnt;				//systickcnt has the start-up time
  while ((SysTickCnt - systick) < tick);
}

void LEDinit(void) {
 380:	b510      	push	{r4, lr}

	// Pin 28 - PORT0 PIN7
	LPC_GPIO0->DIR |= (1<<7); /* GPIOX_X as output */
 382:	23a0      	movs	r3, #160	; 0xa0
 384:	2180      	movs	r1, #128	; 0x80
 386:	05db      	lsls	r3, r3, #23
 388:	0209      	lsls	r1, r1, #8
 38a:	585a      	ldr	r2, [r3, r1]
 38c:	2080      	movs	r0, #128	; 0x80
 38e:	4302      	orrs	r2, r0
 390:	505a      	str	r2, [r3, r1]
	LPC_GPIO0->DATA |= (1<<7); /* set GPIOX_X */
 392:	4a06      	ldr	r2, [pc, #24]	; (3ac <LEDinit+0x2c>)
 394:	589c      	ldr	r4, [r3, r2]
 396:	4320      	orrs	r0, r4
 398:	5098      	str	r0, [r3, r2]

	// Pin 26 - PORT0 PIN3
	LPC_GPIO0->DIR |= (1<<3); /* GPIOX_X as output */
 39a:	585c      	ldr	r4, [r3, r1]
 39c:	2008      	movs	r0, #8
 39e:	4304      	orrs	r4, r0
 3a0:	505c      	str	r4, [r3, r1]
	LPC_GPIO0->DATA |= (1<<3); /* set GPIOX_X */
 3a2:	5899      	ldr	r1, [r3, r2]
 3a4:	4308      	orrs	r0, r1
 3a6:	5098      	str	r0, [r3, r2]
	// Examples
	//LPC_GPIO0->OUT ^= (1<<3); /* toggle GPIOX_X */
	//LPC_GPIO0->OUT &= ~(1<<3); /* clear GPIOX_X */
}
 3a8:	bd10      	pop	{r4, pc}
 3aa:	46c0      	nop			; (mov r8, r8)
 3ac:	00003ffc 	.word	0x00003ffc

000003b0 <TMR16init>:

void TMR16init() {
 3b0:	b570      	push	{r4, r5, r6, lr}
	// System AHB clock control register - Enable Timer16B0 Table 21, P30 in user manual
	LPC_SYSCON->SYSAHBCLKCTRL |= (1 << 7);
 3b2:	4b19      	ldr	r3, [pc, #100]	; (418 <TMR16init+0x68>)
 3b4:	2180      	movs	r1, #128	; 0x80
 3b6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
	/* IOCON_PIO0_8 register - Enable CT16B0_MAT0 pin p85*/
	LPC_IOCON->PIO0_8 |= (1<<1); // enabling bit 1 sets match pin
 3b8:	2602      	movs	r6, #2
	//LPC_GPIO0->OUT &= ~(1<<3); /* clear GPIOX_X */
}

void TMR16init() {
	// System AHB clock control register - Enable Timer16B0 Table 21, P30 in user manual
	LPC_SYSCON->SYSAHBCLKCTRL |= (1 << 7);
 3ba:	430a      	orrs	r2, r1
 3bc:	67da      	str	r2, [r3, #124]	; 0x7c
	/* IOCON_PIO0_8 register - Enable CT16B0_MAT0 pin p85*/
	LPC_IOCON->PIO0_8 |= (1<<1); // enabling bit 1 sets match pin
 3be:	4b17      	ldr	r3, [pc, #92]	; (41c <TMR16init+0x6c>)
	/* IOCON_PIO0_8 register - Enable CT16B0_MAT0 pin p85*/
	LPC_IOCON->PIO0_9 |= (1<<1); // enabling bit 1 sets match pin
	/* IOCON_PIO0_8 register - Enable CT16B0_MAT1 pin p85*/
	LPC_IOCON->SWCLK_PIO0_10 |= (6>>1); // enabling bit 1 sets match pin
 3c0:	2103      	movs	r1, #3

void TMR16init() {
	// System AHB clock control register - Enable Timer16B0 Table 21, P30 in user manual
	LPC_SYSCON->SYSAHBCLKCTRL |= (1 << 7);
	/* IOCON_PIO0_8 register - Enable CT16B0_MAT0 pin p85*/
	LPC_IOCON->PIO0_8 |= (1<<1); // enabling bit 1 sets match pin
 3c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
	LPC_IOCON->PIO0_9 |= (1<<1); // enabling bit 1 sets match pin
	/* IOCON_PIO0_8 register - Enable CT16B0_MAT1 pin p85*/
	LPC_IOCON->SWCLK_PIO0_10 |= (6>>1); // enabling bit 1 sets match pin

	/* Enable PWM function on all CT16B0_MATx pins */
	LPC_TMR16B0->PWMC |= 0b111; // 65535 16bit TOP 1800hz?
 3c4:	4c16      	ldr	r4, [pc, #88]	; (420 <TMR16init+0x70>)

void TMR16init() {
	// System AHB clock control register - Enable Timer16B0 Table 21, P30 in user manual
	LPC_SYSCON->SYSAHBCLKCTRL |= (1 << 7);
	/* IOCON_PIO0_8 register - Enable CT16B0_MAT0 pin p85*/
	LPC_IOCON->PIO0_8 |= (1<<1); // enabling bit 1 sets match pin
 3c6:	4332      	orrs	r2, r6
 3c8:	661a      	str	r2, [r3, #96]	; 0x60
	/* IOCON_PIO0_8 register - Enable CT16B0_MAT0 pin p85*/
	LPC_IOCON->PIO0_9 |= (1<<1); // enabling bit 1 sets match pin
 3ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64

	/* Enable PWM function on all CT16B0_MATx pins */
	LPC_TMR16B0->PWMC |= 0b111; // 65535 16bit TOP 1800hz?

	/* Set the PWM frequency */
	LPC_TMR16B0->MR3 = Frequency; // p.327 in UM
 3cc:	4d15      	ldr	r5, [pc, #84]	; (424 <TMR16init+0x74>)
	// System AHB clock control register - Enable Timer16B0 Table 21, P30 in user manual
	LPC_SYSCON->SYSAHBCLKCTRL |= (1 << 7);
	/* IOCON_PIO0_8 register - Enable CT16B0_MAT0 pin p85*/
	LPC_IOCON->PIO0_8 |= (1<<1); // enabling bit 1 sets match pin
	/* IOCON_PIO0_8 register - Enable CT16B0_MAT0 pin p85*/
	LPC_IOCON->PIO0_9 |= (1<<1); // enabling bit 1 sets match pin
 3ce:	4332      	orrs	r2, r6
 3d0:	665a      	str	r2, [r3, #100]	; 0x64
	/* IOCON_PIO0_8 register - Enable CT16B0_MAT1 pin p85*/
	LPC_IOCON->SWCLK_PIO0_10 |= (6>>1); // enabling bit 1 sets match pin
 3d2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 3d4:	430a      	orrs	r2, r1
 3d6:	669a      	str	r2, [r3, #104]	; 0x68

	/* Enable PWM function on all CT16B0_MATx pins */
	LPC_TMR16B0->PWMC |= 0b111; // 65535 16bit TOP 1800hz?
 3d8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 3da:	2207      	movs	r2, #7
 3dc:	4313      	orrs	r3, r2
 3de:	6763      	str	r3, [r4, #116]	; 0x74

	/* Set the PWM frequency */
	LPC_TMR16B0->MR3 = Frequency; // p.327 in UM
 3e0:	682b      	ldr	r3, [r5, #0]
	/* Set initial duty cycle */
	LPC_TMR16B0->MR0 = Frequency / 10; // p.327 in UM
 3e2:	210a      	movs	r1, #10

	/* Enable PWM function on all CT16B0_MATx pins */
	LPC_TMR16B0->PWMC |= 0b111; // 65535 16bit TOP 1800hz?

	/* Set the PWM frequency */
	LPC_TMR16B0->MR3 = Frequency; // p.327 in UM
 3e4:	6263      	str	r3, [r4, #36]	; 0x24
	/* Set initial duty cycle */
	LPC_TMR16B0->MR0 = Frequency / 10; // p.327 in UM
 3e6:	6828      	ldr	r0, [r5, #0]
 3e8:	f000 fa00 	bl	7ec <__aeabi_uidiv>
 3ec:	61a0      	str	r0, [r4, #24]
	LPC_TMR16B0->MR1 = Frequency / 10;
 3ee:	6828      	ldr	r0, [r5, #0]
 3f0:	210a      	movs	r1, #10
 3f2:	f000 f9fb 	bl	7ec <__aeabi_uidiv>
 3f6:	61e0      	str	r0, [r4, #28]
	LPC_TMR16B0->MR2 = Frequency / 10;
 3f8:	6828      	ldr	r0, [r5, #0]
 3fa:	210a      	movs	r1, #10
 3fc:	f000 f9f6 	bl	7ec <__aeabi_uidiv>
 400:	6220      	str	r0, [r4, #32]
	/* TMR16B0MCR - Reset on MR3 p.330 in UM */
	LPC_TMR16B0->MCR |= (1<<10); // Reset on MR3: the TC will be reset if MR3 matches it.
 402:	6962      	ldr	r2, [r4, #20]
 404:	2380      	movs	r3, #128	; 0x80
 406:	00db      	lsls	r3, r3, #3
 408:	4313      	orrs	r3, r2
 40a:	6163      	str	r3, [r4, #20]
	LPC_TMR16B0->PR = 10; // The 16-bit Prescale Register specifies the maximum value for the Prescale Counter.
 40c:	230a      	movs	r3, #10
 40e:	60e3      	str	r3, [r4, #12]
	LPC_TMR16B0->PC = 2; // Prescale Counter register
	/* Count Control Register (TMR16B0TCR - Start Timer16B0 p.329 in UM */
	LPC_TMR16B0->TCR = 1;// |= (1<<1);
 410:	2301      	movs	r3, #1
	LPC_TMR16B0->MR1 = Frequency / 10;
	LPC_TMR16B0->MR2 = Frequency / 10;
	/* TMR16B0MCR - Reset on MR3 p.330 in UM */
	LPC_TMR16B0->MCR |= (1<<10); // Reset on MR3: the TC will be reset if MR3 matches it.
	LPC_TMR16B0->PR = 10; // The 16-bit Prescale Register specifies the maximum value for the Prescale Counter.
	LPC_TMR16B0->PC = 2; // Prescale Counter register
 412:	6126      	str	r6, [r4, #16]
	/* Count Control Register (TMR16B0TCR - Start Timer16B0 p.329 in UM */
	LPC_TMR16B0->TCR = 1;// |= (1<<1);
 414:	6063      	str	r3, [r4, #4]
}
 416:	bd70      	pop	{r4, r5, r6, pc}
 418:	40048004 	.word	0x40048004
 41c:	40044000 	.word	0x40044000
 420:	4000c000 	.word	0x4000c000
 424:	10000000 	.word	0x10000000

00000428 <playNote>:

void playNote(uint8_t note) {
	Frequency = 65000 - (note * 2500);
 428:	4b06      	ldr	r3, [pc, #24]	; (444 <playNote+0x1c>)

	/* Set the PWM frequency */
	LPC_TMR16B0->MR3 = Frequency; // p.327 in UM
 42a:	4a07      	ldr	r2, [pc, #28]	; (448 <playNote+0x20>)
	/* Count Control Register (TMR16B0TCR - Start Timer16B0 p.329 in UM */
	LPC_TMR16B0->TCR = 1;// |= (1<<1);
}

void playNote(uint8_t note) {
	Frequency = 65000 - (note * 2500);
 42c:	4358      	muls	r0, r3
 42e:	4b07      	ldr	r3, [pc, #28]	; (44c <playNote+0x24>)
 430:	18c0      	adds	r0, r0, r3
 432:	4b07      	ldr	r3, [pc, #28]	; (450 <playNote+0x28>)
 434:	6018      	str	r0, [r3, #0]

	/* Set the PWM frequency */
	LPC_TMR16B0->MR3 = Frequency; // p.327 in UM
 436:	6819      	ldr	r1, [r3, #0]
 438:	6251      	str	r1, [r2, #36]	; 0x24
	/* Set initial duty cycle */
	LPC_TMR16B0->MR0 = Frequency / 2; // p.327 in UM
 43a:	681b      	ldr	r3, [r3, #0]
 43c:	085b      	lsrs	r3, r3, #1
 43e:	6193      	str	r3, [r2, #24]
}
 440:	4770      	bx	lr
 442:	46c0      	nop			; (mov r8, r8)
 444:	fffff63c 	.word	0xfffff63c
 448:	4000c000 	.word	0x4000c000
 44c:	0000fde8 	.word	0x0000fde8
 450:	10000000 	.word	0x10000000

00000454 <beatLight>:

void beatLight() {
 454:	b500      	push	{lr}
	if (ClockTickCnt == 0) {
 456:	4b12      	ldr	r3, [pc, #72]	; (4a0 <beatLight+0x4c>)
 458:	681a      	ldr	r2, [r3, #0]
 45a:	2a00      	cmp	r2, #0
 45c:	d104      	bne.n	468 <beatLight+0x14>
	LPC_TMR16B0->MR0 = 65000; // (65000 / 1000) = 65
 45e:	4a11      	ldr	r2, [pc, #68]	; (4a4 <beatLight+0x50>)
 460:	4911      	ldr	r1, [pc, #68]	; (4a8 <beatLight+0x54>)
 462:	6191      	str	r1, [r2, #24]
	LPC_TMR16B0->MR1 = 65000;
 464:	61d1      	str	r1, [r2, #28]
	LPC_TMR16B0->MR2 = 65000;
 466:	6211      	str	r1, [r2, #32]
	}
	ClockTickCnt++;
 468:	681a      	ldr	r2, [r3, #0]
 46a:	3201      	adds	r2, #1
 46c:	601a      	str	r2, [r3, #0]
	if (ClockTickCnt == 24) {LPC_TMR16B0->MR0 = 65000;}
 46e:	681b      	ldr	r3, [r3, #0]
 470:	2b18      	cmp	r3, #24
 472:	d102      	bne.n	47a <beatLight+0x26>
 474:	4a0c      	ldr	r2, [pc, #48]	; (4a8 <beatLight+0x54>)
 476:	4b0b      	ldr	r3, [pc, #44]	; (4a4 <beatLight+0x50>)
 478:	619a      	str	r2, [r3, #24]
	if (ClockTickCnt == 48) {LPC_TMR16B0->MR1 = 65000;}
 47a:	4b09      	ldr	r3, [pc, #36]	; (4a0 <beatLight+0x4c>)
 47c:	681a      	ldr	r2, [r3, #0]
 47e:	2a30      	cmp	r2, #48	; 0x30
 480:	d102      	bne.n	488 <beatLight+0x34>
 482:	4909      	ldr	r1, [pc, #36]	; (4a8 <beatLight+0x54>)
 484:	4a07      	ldr	r2, [pc, #28]	; (4a4 <beatLight+0x50>)
 486:	61d1      	str	r1, [r2, #28]
	if (ClockTickCnt == 72) {LPC_TMR16B0->MR2 = 65000;}
 488:	681a      	ldr	r2, [r3, #0]
 48a:	2a48      	cmp	r2, #72	; 0x48
 48c:	d102      	bne.n	494 <beatLight+0x40>
 48e:	4906      	ldr	r1, [pc, #24]	; (4a8 <beatLight+0x54>)
 490:	4a04      	ldr	r2, [pc, #16]	; (4a4 <beatLight+0x50>)
 492:	6211      	str	r1, [r2, #32]
	if (ClockTickCnt == 96) {ClockTickCnt = 0;}
 494:	681a      	ldr	r2, [r3, #0]
 496:	2a60      	cmp	r2, #96	; 0x60
 498:	d101      	bne.n	49e <beatLight+0x4a>
 49a:	2200      	movs	r2, #0
 49c:	601a      	str	r2, [r3, #0]

}
 49e:	bd00      	pop	{pc}
 4a0:	10000014 	.word	0x10000014
 4a4:	4000c000 	.word	0x4000c000
 4a8:	0000fde8 	.word	0x0000fde8

000004ac <beatLightOff>:

void beatLightOff() {
	LPC_TMR16B0->MR0 = 0; // (65000 / 1000) = 65
 4ac:	4b02      	ldr	r3, [pc, #8]	; (4b8 <beatLightOff+0xc>)
 4ae:	2200      	movs	r2, #0
 4b0:	619a      	str	r2, [r3, #24]
	LPC_TMR16B0->MR1 = 0;
 4b2:	61da      	str	r2, [r3, #28]
	LPC_TMR16B0->MR2 = 0;
 4b4:	621a      	str	r2, [r3, #32]
}
 4b6:	4770      	bx	lr
 4b8:	4000c000 	.word	0x4000c000

000004bc <main>:


int main(void) {
 4bc:	b570      	push	{r4, r5, r6, lr}

	SystemInit();
 4be:	f000 f949 	bl	754 <SystemInit>
	SysTick_Config(SystemCoreClock/1000 - 1); // sets up our delay timer
 4c2:	4b38      	ldr	r3, [pc, #224]	; (5a4 <main+0xe8>)
 4c4:	21fa      	movs	r1, #250	; 0xfa
 4c6:	6818      	ldr	r0, [r3, #0]
 4c8:	0089      	lsls	r1, r1, #2
 4ca:	f000 f98f 	bl	7ec <__aeabi_uidiv>
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 4ce:	4b36      	ldr	r3, [pc, #216]	; (5a8 <main+0xec>)
 4d0:	1e42      	subs	r2, r0, #1
 4d2:	429a      	cmp	r2, r3
 4d4:	d80e      	bhi.n	4f4 <main+0x38>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 4d6:	4b35      	ldr	r3, [pc, #212]	; (5ac <main+0xf0>)
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 4d8:	4a35      	ldr	r2, [pc, #212]	; (5b0 <main+0xf4>)
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 4da:	3802      	subs	r0, #2
 4dc:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 4de:	6a10      	ldr	r0, [r2, #32]
 4e0:	21c0      	movs	r1, #192	; 0xc0
 4e2:	0200      	lsls	r0, r0, #8
 4e4:	0a00      	lsrs	r0, r0, #8
 4e6:	0609      	lsls	r1, r1, #24
 4e8:	4301      	orrs	r1, r0
 4ea:	6211      	str	r1, [r2, #32]
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 4ec:	2200      	movs	r2, #0
 4ee:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 4f0:	2207      	movs	r2, #7
 4f2:	601a      	str	r2, [r3, #0]
	LEDinit();
 4f4:	f7ff ff44 	bl	380 <LEDinit>
	TMR16init();
 4f8:	f7ff ff5a 	bl	3b0 <TMR16init>
	UARTInit(UART_BAUD);
 4fc:	482d      	ldr	r0, [pc, #180]	; (5b4 <main+0xf8>)
 4fe:	f000 f8b1 	bl	664 <UARTInit>
		//Delay(1000);

		if (UARTCount > 0) { // MIDI commands are 3 bytes
			while (UARTCount > 0) {
				LPC_UART->IER = IER_THRE | IER_RLS;			/* Disable UART Interrupt Enable Register */
				switch ( *UARTBuffer ) {
 502:	4d2d      	ldr	r5, [pc, #180]	; (5b8 <main+0xfc>)
	UARTInit(UART_BAUD);

	while(1) {
		//Delay(1000);

		if (UARTCount > 0) { // MIDI commands are 3 bytes
 504:	4b2d      	ldr	r3, [pc, #180]	; (5bc <main+0x100>)
 506:	681b      	ldr	r3, [r3, #0]
 508:	2b00      	cmp	r3, #0
 50a:	d0fb      	beq.n	504 <main+0x48>
 50c:	e045      	b.n	59a <main+0xde>
			while (UARTCount > 0) {
				LPC_UART->IER = IER_THRE | IER_RLS;			/* Disable UART Interrupt Enable Register */
 50e:	4e2c      	ldr	r6, [pc, #176]	; (5c0 <main+0x104>)
 510:	2306      	movs	r3, #6
 512:	6073      	str	r3, [r6, #4]
				switch ( *UARTBuffer ) {
 514:	782b      	ldrb	r3, [r5, #0]
 516:	2bf8      	cmp	r3, #248	; 0xf8
 518:	d028      	beq.n	56c <main+0xb0>
 51a:	d802      	bhi.n	522 <main+0x66>
 51c:	2b90      	cmp	r3, #144	; 0x90
 51e:	d132      	bne.n	586 <main+0xca>
 520:	e004      	b.n	52c <main+0x70>
 522:	2bfa      	cmp	r3, #250	; 0xfa
 524:	d013      	beq.n	54e <main+0x92>
 526:	2bfc      	cmp	r3, #252	; 0xfc
 528:	d12d      	bne.n	586 <main+0xca>
 52a:	e022      	b.n	572 <main+0xb6>
				case 0x90: // NOTE ON, CH0
					if (UARTCount >= 3) { // wait for entire command
 52c:	6823      	ldr	r3, [r4, #0]
 52e:	2b02      	cmp	r3, #2
 530:	d931      	bls.n	596 <main+0xda>
						*UARTBuffer = *(UARTBuffer+1); // skip the first byte
 532:	786b      	ldrb	r3, [r5, #1]
						UARTSend( (uint8_t *)UARTBuffer, 1 ); // send only note pitch
 534:	1c28      	adds	r0, r5, #0
			while (UARTCount > 0) {
				LPC_UART->IER = IER_THRE | IER_RLS;			/* Disable UART Interrupt Enable Register */
				switch ( *UARTBuffer ) {
				case 0x90: // NOTE ON, CH0
					if (UARTCount >= 3) { // wait for entire command
						*UARTBuffer = *(UARTBuffer+1); // skip the first byte
 536:	702b      	strb	r3, [r5, #0]
						UARTSend( (uint8_t *)UARTBuffer, 1 ); // send only note pitch
 538:	2101      	movs	r1, #1
 53a:	f000 f8f9 	bl	730 <UARTSend>
						playNote(*UARTBuffer);
 53e:	7828      	ldrb	r0, [r5, #0]
 540:	f7ff ff72 	bl	428 <playNote>
						*UARTBuffer = *(UARTBuffer+1);
 544:	786b      	ldrb	r3, [r5, #1]
 546:	702b      	strb	r3, [r5, #0]
						UARTCount-=3;
 548:	6823      	ldr	r3, [r4, #0]
 54a:	3b03      	subs	r3, #3
 54c:	e00c      	b.n	568 <main+0xac>
					}
				  break;
				case 0xfa:
					LPC_GPIO0->DATA ^= (1<<3); /* toggle GPIOX_X */
 54e:	4b1d      	ldr	r3, [pc, #116]	; (5c4 <main+0x108>)
 550:	22a0      	movs	r2, #160	; 0xa0
 552:	05d2      	lsls	r2, r2, #23
 554:	58d1      	ldr	r1, [r2, r3]
 556:	2008      	movs	r0, #8
 558:	4041      	eors	r1, r0
 55a:	50d1      	str	r1, [r2, r3]
					UARTSend( (uint8_t *)UARTBuffer, 1 );
 55c:	1c28      	adds	r0, r5, #0
 55e:	2101      	movs	r1, #1
 560:	f000 f8e6 	bl	730 <UARTSend>
					UARTCount--;
 564:	6823      	ldr	r3, [r4, #0]
 566:	3b01      	subs	r3, #1
 568:	6023      	str	r3, [r4, #0]
				  break;
 56a:	e014      	b.n	596 <main+0xda>
				case 0xf8:
					beatLight();
 56c:	f7ff ff72 	bl	454 <beatLight>
 570:	e7ed      	b.n	54e <main+0x92>
					LPC_GPIO0->DATA ^= (1<<3); /* toggle GPIOX_X */
					UARTSend( (uint8_t *)UARTBuffer, 1 );
					UARTCount--;
				  break;
				case 0xfc:
					LPC_GPIO0->DATA &= ~(1<<3); /* clear GPIOX_X */
 572:	4b14      	ldr	r3, [pc, #80]	; (5c4 <main+0x108>)
 574:	22a0      	movs	r2, #160	; 0xa0
 576:	05d2      	lsls	r2, r2, #23
 578:	58d1      	ldr	r1, [r2, r3]
 57a:	2008      	movs	r0, #8
 57c:	4381      	bics	r1, r0
 57e:	50d1      	str	r1, [r2, r3]
					beatLightOff();
 580:	f7ff ff94 	bl	4ac <beatLightOff>
 584:	e7ea      	b.n	55c <main+0xa0>
					UARTSend( (uint8_t *)UARTBuffer, 1 );
					UARTCount--;
				  break;
				default:
					UARTSend( (uint8_t *)UARTBuffer, 1 );
 586:	1c28      	adds	r0, r5, #0
 588:	2101      	movs	r1, #1
 58a:	f000 f8d1 	bl	730 <UARTSend>
					UARTCount--;
 58e:	4b0b      	ldr	r3, [pc, #44]	; (5bc <main+0x100>)
 590:	681a      	ldr	r2, [r3, #0]
 592:	3a01      	subs	r2, #1
 594:	601a      	str	r2, [r3, #0]
				  break;
				}
				LPC_UART->IER = IER_THRE | IER_RLS | IER_RBR;	/* Re-enable UART Interrupt Enable Register */
 596:	2307      	movs	r3, #7
 598:	6073      	str	r3, [r6, #4]

	while(1) {
		//Delay(1000);

		if (UARTCount > 0) { // MIDI commands are 3 bytes
			while (UARTCount > 0) {
 59a:	4c08      	ldr	r4, [pc, #32]	; (5bc <main+0x100>)
 59c:	6823      	ldr	r3, [r4, #0]
 59e:	2b00      	cmp	r3, #0
 5a0:	d0b0      	beq.n	504 <main+0x48>
 5a2:	e7b4      	b.n	50e <main+0x52>
 5a4:	10000008 	.word	0x10000008
 5a8:	00ffffff 	.word	0x00ffffff
 5ac:	e000e010 	.word	0xe000e010
 5b0:	e000ed00 	.word	0xe000ed00
 5b4:	00007a12 	.word	0x00007a12
 5b8:	1000001c 	.word	0x1000001c
 5bc:	10000018 	.word	0x10000018
 5c0:	40008000 	.word	0x40008000
 5c4:	00003ffc 	.word	0x00003ffc

000005c8 <UART_IRQHandler>:
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void UART_IRQHandler(void)
{
 5c8:	b510      	push	{r4, lr}
  uint8_t IIRValue, LSRValue;
  uint8_t Dummy = Dummy;

  IIRValue = LPC_UART->IIR;
 5ca:	4b21      	ldr	r3, [pc, #132]	; (650 <UART_IRQHandler+0x88>)
 5cc:	689a      	ldr	r2, [r3, #8]
    
  IIRValue >>= 1;			/* skip pending bit in IIR */
  IIRValue &= 0x07;			/* check bit 1~3, interrupt identification */
 5ce:	0712      	lsls	r2, r2, #28
 5d0:	0f52      	lsrs	r2, r2, #29
  if (IIRValue == IIR_RLS)		/* Receive Line Status */
 5d2:	2a03      	cmp	r2, #3
 5d4:	d117      	bne.n	606 <UART_IRQHandler+0x3e>
  {
    LSRValue = LPC_UART->LSR;
 5d6:	695a      	ldr	r2, [r3, #20]
    /* Receive Line Status */
    if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI))
 5d8:	219e      	movs	r1, #158	; 0x9e
    
  IIRValue >>= 1;			/* skip pending bit in IIR */
  IIRValue &= 0x07;			/* check bit 1~3, interrupt identification */
  if (IIRValue == IIR_RLS)		/* Receive Line Status */
  {
    LSRValue = LPC_UART->LSR;
 5da:	b2d2      	uxtb	r2, r2
    /* Receive Line Status */
    if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI))
 5dc:	4011      	ands	r1, r2
 5de:	d003      	beq.n	5e8 <UART_IRQHandler+0x20>
    {
      /* There are errors or break interrupt */
      /* Read LSR will clear the interrupt */
      UARTStatus = LSRValue;
 5e0:	491c      	ldr	r1, [pc, #112]	; (654 <UART_IRQHandler+0x8c>)
 5e2:	600a      	str	r2, [r1, #0]
      Dummy = LPC_UART->RBR;	/* Dummy read on RX to clear 
 5e4:	681b      	ldr	r3, [r3, #0]
								interrupt, then bail out */
      return;
 5e6:	e031      	b.n	64c <UART_IRQHandler+0x84>
    }
    if (LSRValue & LSR_RDR)	/* Receive Data Ready */			
 5e8:	07d0      	lsls	r0, r2, #31
 5ea:	d52f      	bpl.n	64c <UART_IRQHandler+0x84>
    {
      /* If no error on RLS, normal ready, save into the data buffer. */
      /* Note: read RBR will clear the interrupt */
      UARTBuffer[UARTCount++] = LPC_UART->RBR;
 5ec:	4a1a      	ldr	r2, [pc, #104]	; (658 <UART_IRQHandler+0x90>)
 5ee:	6810      	ldr	r0, [r2, #0]
 5f0:	681c      	ldr	r4, [r3, #0]
 5f2:	4b1a      	ldr	r3, [pc, #104]	; (65c <UART_IRQHandler+0x94>)
 5f4:	b2e4      	uxtb	r4, r4
 5f6:	541c      	strb	r4, [r3, r0]
 5f8:	3001      	adds	r0, #1
 5fa:	6010      	str	r0, [r2, #0]
      if (UARTCount == BUFSIZE)
 5fc:	6813      	ldr	r3, [r2, #0]
 5fe:	2b40      	cmp	r3, #64	; 0x40
 600:	d124      	bne.n	64c <UART_IRQHandler+0x84>
      {
        UARTCount = 0;		/* buffer overflow */
 602:	6011      	str	r1, [r2, #0]
 604:	e022      	b.n	64c <UART_IRQHandler+0x84>
      }	
    }
  }
  else if (IIRValue == IIR_RDA)	/* Receive Data Available */
 606:	2a02      	cmp	r2, #2
 608:	d10d      	bne.n	626 <UART_IRQHandler+0x5e>
  {
    /* Receive Data Available */
    UARTBuffer[UARTCount++] = LPC_UART->RBR;
 60a:	4a13      	ldr	r2, [pc, #76]	; (658 <UART_IRQHandler+0x90>)
 60c:	6811      	ldr	r1, [r2, #0]
 60e:	6818      	ldr	r0, [r3, #0]
 610:	4b12      	ldr	r3, [pc, #72]	; (65c <UART_IRQHandler+0x94>)
 612:	b2c0      	uxtb	r0, r0
 614:	5458      	strb	r0, [r3, r1]
 616:	3101      	adds	r1, #1
 618:	6011      	str	r1, [r2, #0]
    if (UARTCount == BUFSIZE)
 61a:	6813      	ldr	r3, [r2, #0]
 61c:	2b40      	cmp	r3, #64	; 0x40
 61e:	d115      	bne.n	64c <UART_IRQHandler+0x84>
    {
      UARTCount = 0;		/* buffer overflow */
 620:	2300      	movs	r3, #0
 622:	6013      	str	r3, [r2, #0]
 624:	e012      	b.n	64c <UART_IRQHandler+0x84>
    }
  }
  else if (IIRValue == IIR_CTI)	/* Character timeout indicator */
 626:	2a06      	cmp	r2, #6
 628:	d106      	bne.n	638 <UART_IRQHandler+0x70>
  {
    /* Character Time-out indicator */
    UARTStatus |= 0x100;		/* Bit 9 as the CTI error */
 62a:	4b0a      	ldr	r3, [pc, #40]	; (654 <UART_IRQHandler+0x8c>)
 62c:	2280      	movs	r2, #128	; 0x80
 62e:	6819      	ldr	r1, [r3, #0]
 630:	0052      	lsls	r2, r2, #1
 632:	430a      	orrs	r2, r1
 634:	601a      	str	r2, [r3, #0]
 636:	e009      	b.n	64c <UART_IRQHandler+0x84>
  }
  else if (IIRValue == IIR_THRE)	/* THRE, transmit holding register empty */
 638:	2a01      	cmp	r2, #1
 63a:	d107      	bne.n	64c <UART_IRQHandler+0x84>
  {
    /* THRE interrupt */
    LSRValue = LPC_UART->LSR;		/* Check status in the LSR to see if
 63c:	6959      	ldr	r1, [r3, #20]
								valid data in U0THR or not */
    if (LSRValue & LSR_THRE)
 63e:	2320      	movs	r3, #32
 640:	4019      	ands	r1, r3
 642:	4b07      	ldr	r3, [pc, #28]	; (660 <UART_IRQHandler+0x98>)
 644:	d001      	beq.n	64a <UART_IRQHandler+0x82>
    {
      UARTTxEmpty = 1;
 646:	701a      	strb	r2, [r3, #0]
 648:	e000      	b.n	64c <UART_IRQHandler+0x84>
    }
    else
    {
      UARTTxEmpty = 0;
 64a:	7019      	strb	r1, [r3, #0]
    }
  }
  return;
}
 64c:	bd10      	pop	{r4, pc}
 64e:	46c0      	nop			; (mov r8, r8)
 650:	40008000 	.word	0x40008000
 654:	1000005c 	.word	0x1000005c
 658:	10000018 	.word	0x10000018
 65c:	1000001c 	.word	0x1000001c
 660:	10000004 	.word	0x10000004

00000664 <UARTInit>:
** parameters:			UART baudrate
** Returned value:		None
** 
*****************************************************************************/
void UARTInit(uint32_t baudrate)
{
 664:	b570      	push	{r4, r5, r6, lr}
  uint32_t Fdiv;
  uint32_t regVal;

  UARTTxEmpty = 1;
 666:	4a27      	ldr	r2, [pc, #156]	; (704 <UARTInit+0xa0>)
 668:	2301      	movs	r3, #1
 66a:	7013      	strb	r3, [r2, #0]
  UARTCount = 0;
 66c:	4a26      	ldr	r2, [pc, #152]	; (708 <UARTInit+0xa4>)
 66e:	2100      	movs	r1, #0
 670:	6011      	str	r1, [r2, #0]

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 672:	4a26      	ldr	r2, [pc, #152]	; (70c <UARTInit+0xa8>)
 674:	2180      	movs	r1, #128	; 0x80
 676:	0389      	lsls	r1, r1, #14
 678:	67d1      	str	r1, [r2, #124]	; 0x7c
  
  NVIC_DisableIRQ(UART_IRQn);

  LPC_IOCON->PIO1_6 &= ~0x07;    /*  UART I/O config */
 67a:	4a25      	ldr	r2, [pc, #148]	; (710 <UARTInit+0xac>)
 67c:	2507      	movs	r5, #7
 67e:	6811      	ldr	r1, [r2, #0]
** parameters:			UART baudrate
** Returned value:		None
** 
*****************************************************************************/
void UARTInit(uint32_t baudrate)
{
 680:	1c06      	adds	r6, r0, #0
  UARTTxEmpty = 1;
  UARTCount = 0;
  
  NVIC_DisableIRQ(UART_IRQn);

  LPC_IOCON->PIO1_6 &= ~0x07;    /*  UART I/O config */
 682:	43a9      	bics	r1, r5
 684:	6011      	str	r1, [r2, #0]
  LPC_IOCON->PIO1_6 |= 0x01;     /* UART RXD */
 686:	6811      	ldr	r1, [r2, #0]
  LPC_IOCON->PIO1_7 |= 0x01;     /* UART TXD */
  /* Enable UART clock */
  LPC_SYSCON->SYSAHBCLKCTRL |= (1<<12);
  LPC_SYSCON->UARTCLKDIV = 0x1;     /* divided by 1 */

  LPC_UART->LCR = 0x83;             /* 8 bits, no Parity, 1 Stop bit */
 688:	4c22      	ldr	r4, [pc, #136]	; (714 <UARTInit+0xb0>)
  UARTCount = 0;
  
  NVIC_DisableIRQ(UART_IRQn);

  LPC_IOCON->PIO1_6 &= ~0x07;    /*  UART I/O config */
  LPC_IOCON->PIO1_6 |= 0x01;     /* UART RXD */
 68a:	4319      	orrs	r1, r3
 68c:	6011      	str	r1, [r2, #0]
  LPC_IOCON->PIO1_7 &= ~0x07;	
 68e:	4a22      	ldr	r2, [pc, #136]	; (718 <UARTInit+0xb4>)
 690:	6811      	ldr	r1, [r2, #0]
 692:	43a9      	bics	r1, r5
 694:	6011      	str	r1, [r2, #0]
  LPC_IOCON->PIO1_7 |= 0x01;     /* UART TXD */
 696:	6811      	ldr	r1, [r2, #0]
 698:	4319      	orrs	r1, r3
 69a:	6011      	str	r1, [r2, #0]
  /* Enable UART clock */
  LPC_SYSCON->SYSAHBCLKCTRL |= (1<<12);
 69c:	4a1f      	ldr	r2, [pc, #124]	; (71c <UARTInit+0xb8>)
 69e:	2180      	movs	r1, #128	; 0x80
 6a0:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 6a2:	0149      	lsls	r1, r1, #5
 6a4:	4301      	orrs	r1, r0
 6a6:	67d1      	str	r1, [r2, #124]	; 0x7c
  LPC_SYSCON->UARTCLKDIV = 0x1;     /* divided by 1 */
 6a8:	4a1d      	ldr	r2, [pc, #116]	; (720 <UARTInit+0xbc>)
 6aa:	6013      	str	r3, [r2, #0]

  LPC_UART->LCR = 0x83;             /* 8 bits, no Parity, 1 Stop bit */
 6ac:	2383      	movs	r3, #131	; 0x83
 6ae:	60e3      	str	r3, [r4, #12]
  regVal = LPC_SYSCON->UARTCLKDIV;
 6b0:	6811      	ldr	r1, [r2, #0]

  Fdiv = (((SystemCoreClock*LPC_SYSCON->SYSAHBCLKDIV)/regVal)/16)/baudrate ;	/*baud rate */
 6b2:	4b1c      	ldr	r3, [pc, #112]	; (724 <UARTInit+0xc0>)
 6b4:	4a1c      	ldr	r2, [pc, #112]	; (728 <UARTInit+0xc4>)
 6b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 6b8:	6810      	ldr	r0, [r2, #0]
 6ba:	4358      	muls	r0, r3
 6bc:	f000 f896 	bl	7ec <__aeabi_uidiv>
 6c0:	1c31      	adds	r1, r6, #0
 6c2:	0900      	lsrs	r0, r0, #4
 6c4:	f000 f892 	bl	7ec <__aeabi_uidiv>

  LPC_UART->DLM = Fdiv / 256;							
 6c8:	0a03      	lsrs	r3, r0, #8
 6ca:	6063      	str	r3, [r4, #4]
  LPC_UART->DLL = Fdiv % 256;
 6cc:	b2c0      	uxtb	r0, r0
  LPC_UART->LCR = 0x03;		/* DLAB = 0 */
 6ce:	2303      	movs	r3, #3
  regVal = LPC_SYSCON->UARTCLKDIV;

  Fdiv = (((SystemCoreClock*LPC_SYSCON->SYSAHBCLKDIV)/regVal)/16)/baudrate ;	/*baud rate */

  LPC_UART->DLM = Fdiv / 256;							
  LPC_UART->DLL = Fdiv % 256;
 6d0:	6020      	str	r0, [r4, #0]
  LPC_UART->LCR = 0x03;		/* DLAB = 0 */
 6d2:	60e3      	str	r3, [r4, #12]
  LPC_UART->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
 6d4:	60a5      	str	r5, [r4, #8]

  /* Read to clear the line status. */
  regVal = LPC_UART->LSR;
 6d6:	6963      	ldr	r3, [r4, #20]

  /* Ensure a clean start, no data in either TX or RX FIFO. */
// CodeRed - added parentheses around comparison in operand of &
  while (( LPC_UART->LSR & (LSR_THRE|LSR_TEMT)) != (LSR_THRE|LSR_TEMT) );
 6d8:	2360      	movs	r3, #96	; 0x60
 6da:	6962      	ldr	r2, [r4, #20]
 6dc:	401a      	ands	r2, r3
 6de:	2a60      	cmp	r2, #96	; 0x60
 6e0:	d1fb      	bne.n	6da <UARTInit+0x76>
 6e2:	e001      	b.n	6e8 <UARTInit+0x84>
  while ( LPC_UART->LSR & LSR_RDR )
  {
	regVal = LPC_UART->RBR;	/* Dump data from RX FIFO */
 6e4:	6811      	ldr	r1, [r2, #0]
 6e6:	e001      	b.n	6ec <UARTInit+0x88>
  regVal = LPC_UART->LSR;

  /* Ensure a clean start, no data in either TX or RX FIFO. */
// CodeRed - added parentheses around comparison in operand of &
  while (( LPC_UART->LSR & (LSR_THRE|LSR_TEMT)) != (LSR_THRE|LSR_TEMT) );
  while ( LPC_UART->LSR & LSR_RDR )
 6e8:	4a0a      	ldr	r2, [pc, #40]	; (714 <UARTInit+0xb0>)
 6ea:	2301      	movs	r3, #1
 6ec:	6961      	ldr	r1, [r4, #20]
 6ee:	4219      	tst	r1, r3
 6f0:	d1f8      	bne.n	6e4 <UARTInit+0x80>

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 6f2:	4b0e      	ldr	r3, [pc, #56]	; (72c <UARTInit+0xc8>)
 6f4:	2280      	movs	r2, #128	; 0x80
 6f6:	0392      	lsls	r2, r2, #14
 6f8:	601a      	str	r2, [r3, #0]

#if CONFIG_UART_ENABLE_INTERRUPT==1
#if CONFIG_UART_ENABLE_TX_INTERRUPT==1
  LPC_UART->IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART interrupt */
#else
  LPC_UART->IER = IER_RBR | IER_RLS;	/* Enable UART interrupt */
 6fa:	4b06      	ldr	r3, [pc, #24]	; (714 <UARTInit+0xb0>)
 6fc:	2205      	movs	r2, #5
 6fe:	605a      	str	r2, [r3, #4]
#endif
#endif
  return;
}
 700:	bd70      	pop	{r4, r5, r6, pc}
 702:	46c0      	nop			; (mov r8, r8)
 704:	10000004 	.word	0x10000004
 708:	10000018 	.word	0x10000018
 70c:	e000e104 	.word	0xe000e104
 710:	400440a4 	.word	0x400440a4
 714:	40008000 	.word	0x40008000
 718:	400440a8 	.word	0x400440a8
 71c:	40048004 	.word	0x40048004
 720:	40048098 	.word	0x40048098
 724:	40048000 	.word	0x40048000
 728:	10000008 	.word	0x10000008
 72c:	e000e100 	.word	0xe000e100

00000730 <UARTSend>:
** parameters:		buffer pointer, and data length
** Returned value:	None
** 
*****************************************************************************/
void UARTSend(uint8_t *BufferPtr, uint32_t Length)
{
 730:	b530      	push	{r4, r5, lr}
	  /* Below flag is set inside the interrupt handler when THRE occurs. */
      while ( !(UARTTxEmpty & 0x01) );
	  LPC_UART->THR = *BufferPtr;
      UARTTxEmpty = 0;	/* not empty in the THR until it shifts out */
#else
	  while ( !(LPC_UART->LSR & LSR_THRE) );
 732:	4a07      	ldr	r2, [pc, #28]	; (750 <UARTSend+0x20>)
 734:	2320      	movs	r3, #32
** 
*****************************************************************************/
void UARTSend(uint8_t *BufferPtr, uint32_t Length)
{
  
  while ( Length != 0 )
 736:	e007      	b.n	748 <UARTSend+0x18>
	  /* Below flag is set inside the interrupt handler when THRE occurs. */
      while ( !(UARTTxEmpty & 0x01) );
	  LPC_UART->THR = *BufferPtr;
      UARTTxEmpty = 0;	/* not empty in the THR until it shifts out */
#else
	  while ( !(LPC_UART->LSR & LSR_THRE) );
 738:	6954      	ldr	r4, [r2, #20]
 73a:	421c      	tst	r4, r3
 73c:	d0fc      	beq.n	738 <UARTSend+0x8>
	  LPC_UART->THR = *BufferPtr;
 73e:	7805      	ldrb	r5, [r0, #0]
 740:	4c03      	ldr	r4, [pc, #12]	; (750 <UARTSend+0x20>)
#endif
      BufferPtr++;
 742:	3001      	adds	r0, #1
      while ( !(UARTTxEmpty & 0x01) );
	  LPC_UART->THR = *BufferPtr;
      UARTTxEmpty = 0;	/* not empty in the THR until it shifts out */
#else
	  while ( !(LPC_UART->LSR & LSR_THRE) );
	  LPC_UART->THR = *BufferPtr;
 744:	6025      	str	r5, [r4, #0]
#endif
      BufferPtr++;
      Length--;
 746:	3901      	subs	r1, #1
** 
*****************************************************************************/
void UARTSend(uint8_t *BufferPtr, uint32_t Length)
{
  
  while ( Length != 0 )
 748:	2900      	cmp	r1, #0
 74a:	d1f5      	bne.n	738 <UARTSend+0x8>
#endif
      BufferPtr++;
      Length--;
  }
  return;
}
 74c:	bd30      	pop	{r4, r5, pc}
 74e:	46c0      	nop			; (mov r8, r8)
 750:	40008000 	.word	0x40008000

00000754 <SystemInit>:
 *
 * @brief  Setup the microcontroller system.
 *         Initialize the System.
 */
void SystemInit (void)
{
 754:	b510      	push	{r4, lr}
#if (CLOCK_SETUP)                                 /* Clock Setup              */
#if (SYSCLK_SETUP)                                /* System Clock Setup       */
#if (SYSOSC_SETUP)                                /* System Oscillator Setup  */
  uint32_t i;

  LPC_SYSCON->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
 756:	4b1d      	ldr	r3, [pc, #116]	; (7cc <SystemInit+0x78>)
 758:	228e      	movs	r2, #142	; 0x8e
 75a:	0092      	lsls	r2, r2, #2
 75c:	5899      	ldr	r1, [r3, r2]
 75e:	2020      	movs	r0, #32
 760:	4381      	bics	r1, r0
 762:	5099      	str	r1, [r3, r2]
  LPC_SYSCON->SYSOSCCTRL    = SYSOSCCTRL_Val;
 764:	2200      	movs	r2, #0
 766:	621a      	str	r2, [r3, #32]
 768:	22c8      	movs	r2, #200	; 0xc8

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 76a:	46c0      	nop			; (mov r8, r8)
 76c:	3a01      	subs	r2, #1
  for (i = 0; i < 200; i++) __NOP();
 76e:	2a00      	cmp	r2, #0
 770:	d1fb      	bne.n	76a <SystemInit+0x16>
  LPC_SYSCON->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
  LPC_SYSCON->SYSPLLCLKUEN  = 0x01;               /* Update Clock Source      */
 772:	2101      	movs	r1, #1
  uint32_t i;

  LPC_SYSCON->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
  LPC_SYSCON->SYSOSCCTRL    = SYSOSCCTRL_Val;
  for (i = 0; i < 200; i++) __NOP();
  LPC_SYSCON->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
 774:	641a      	str	r2, [r3, #64]	; 0x40
  LPC_SYSCON->SYSPLLCLKUEN  = 0x01;               /* Update Clock Source      */
 776:	6459      	str	r1, [r3, #68]	; 0x44
  LPC_SYSCON->SYSPLLCLKUEN  = 0x00;               /* Toggle Update Register   */
 778:	645a      	str	r2, [r3, #68]	; 0x44
  LPC_SYSCON->SYSPLLCLKUEN  = 0x01;
 77a:	6459      	str	r1, [r3, #68]	; 0x44
  while (!(LPC_SYSCON->SYSPLLCLKUEN & 0x01));     /* Wait Until Updated       */
 77c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 77e:	4a13      	ldr	r2, [pc, #76]	; (7cc <SystemInit+0x78>)
 780:	4208      	tst	r0, r1
 782:	d0fb      	beq.n	77c <SystemInit+0x28>
#if (SYSPLL_SETUP)                                /* System PLL Setup         */
  LPC_SYSCON->SYSPLLCTRL    = SYSPLLCTRL_Val;
 784:	2123      	movs	r1, #35	; 0x23
 786:	6091      	str	r1, [r2, #8]
  LPC_SYSCON->PDRUNCFG     &= ~(1 << 7);          /* Power-up SYSPLL          */
 788:	218e      	movs	r1, #142	; 0x8e
 78a:	0089      	lsls	r1, r1, #2
 78c:	5850      	ldr	r0, [r2, r1]
 78e:	2480      	movs	r4, #128	; 0x80
 790:	43a0      	bics	r0, r4
 792:	5050      	str	r0, [r2, r1]
  while (!(LPC_SYSCON->SYSPLLSTAT & 0x01));	      /* Wait Until PLL Locked    */
 794:	2001      	movs	r0, #1
 796:	68dc      	ldr	r4, [r3, #12]
 798:	4a0c      	ldr	r2, [pc, #48]	; (7cc <SystemInit+0x78>)
 79a:	2101      	movs	r1, #1
 79c:	4204      	tst	r4, r0
 79e:	d0fa      	beq.n	796 <SystemInit+0x42>
#endif
#if (WDTOSC_SETUP)                                /* Watchdog Oscillator Setup*/
  LPC_SYSCON->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCON->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCON->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
 7a0:	2003      	movs	r0, #3
 7a2:	6710      	str	r0, [r2, #112]	; 0x70
  LPC_SYSCON->MAINCLKUEN    = 0x01;               /* Update MCLK Clock Source */
  LPC_SYSCON->MAINCLKUEN    = 0x00;               /* Toggle Update Register   */
 7a4:	2000      	movs	r0, #0
#if (WDTOSC_SETUP)                                /* Watchdog Oscillator Setup*/
  LPC_SYSCON->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCON->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCON->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
  LPC_SYSCON->MAINCLKUEN    = 0x01;               /* Update MCLK Clock Source */
 7a6:	6751      	str	r1, [r2, #116]	; 0x74
  LPC_SYSCON->MAINCLKUEN    = 0x00;               /* Toggle Update Register   */
 7a8:	6750      	str	r0, [r2, #116]	; 0x74
  LPC_SYSCON->MAINCLKUEN    = 0x01;
 7aa:	6751      	str	r1, [r2, #116]	; 0x74
  while (!(LPC_SYSCON->MAINCLKUEN & 0x01));       /* Wait Until Updated       */
 7ac:	6f58      	ldr	r0, [r3, #116]	; 0x74
 7ae:	2201      	movs	r2, #1
 7b0:	4208      	tst	r0, r1
 7b2:	d0fb      	beq.n	7ac <SystemInit+0x58>
#endif

  LPC_SYSCON->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
 7b4:	4b05      	ldr	r3, [pc, #20]	; (7cc <SystemInit+0x78>)
  LPC_SYSCON->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
 7b6:	4906      	ldr	r1, [pc, #24]	; (7d0 <SystemInit+0x7c>)
  LPC_SYSCON->MAINCLKUEN    = 0x00;               /* Toggle Update Register   */
  LPC_SYSCON->MAINCLKUEN    = 0x01;
  while (!(LPC_SYSCON->MAINCLKUEN & 0x01));       /* Wait Until Updated       */
#endif

  LPC_SYSCON->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
 7b8:	679a      	str	r2, [r3, #120]	; 0x78
  LPC_SYSCON->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
 7ba:	4b06      	ldr	r3, [pc, #24]	; (7d4 <SystemInit+0x80>)
 7bc:	67d9      	str	r1, [r3, #124]	; 0x7c
  LPC_SYSCON->SSP0CLKDIV    = SSP0CLKDIV_Val;
 7be:	4b06      	ldr	r3, [pc, #24]	; (7d8 <SystemInit+0x84>)
 7c0:	601a      	str	r2, [r3, #0]
  LPC_SYSCON->UARTCLKDIV    = UARTCLKDIV_Val;
 7c2:	4b06      	ldr	r3, [pc, #24]	; (7dc <SystemInit+0x88>)
 7c4:	601a      	str	r2, [r3, #0]
  LPC_SYSCON->SSP1CLKDIV    = SSP1CLKDIV_Val;
 7c6:	4b06      	ldr	r3, [pc, #24]	; (7e0 <SystemInit+0x8c>)
 7c8:	601a      	str	r2, [r3, #0]


#if (MEMMAP_SETUP || MEMMAP_INIT)       /* Memory Mapping Setup               */
  LPC_SYSCON->SYSMEMREMAP = SYSMEMREMAP_Val;
#endif
}
 7ca:	bd10      	pop	{r4, pc}
 7cc:	40048000 	.word	0x40048000
 7d0:	0001005f 	.word	0x0001005f
 7d4:	40048004 	.word	0x40048004
 7d8:	40048094 	.word	0x40048094
 7dc:	40048098 	.word	0x40048098
 7e0:	4004809c 	.word	0x4004809c

000007e4 <__weak_main>:
 7e4:	b508      	push	{r3, lr}
 7e6:	f7ff fe69 	bl	4bc <main>
 7ea:	bd08      	pop	{r3, pc}

000007ec <__aeabi_uidiv>:
 7ec:	2900      	cmp	r1, #0
 7ee:	d031      	beq.n	854 <idiv_divzero>
 7f0:	2201      	movs	r2, #1
 7f2:	07d2      	lsls	r2, r2, #31
 7f4:	0903      	lsrs	r3, r0, #4
 7f6:	e001      	b.n	7fc <div_search4a>

000007f8 <div_search4>:
 7f8:	0109      	lsls	r1, r1, #4
 7fa:	0912      	lsrs	r2, r2, #4

000007fc <div_search4a>:
 7fc:	4299      	cmp	r1, r3
 7fe:	d9fb      	bls.n	7f8 <div_search4>
 800:	0843      	lsrs	r3, r0, #1
 802:	e001      	b.n	808 <div_search1a>

00000804 <div_search1>:
 804:	0049      	lsls	r1, r1, #1
 806:	0852      	lsrs	r2, r2, #1

00000808 <div_search1a>:
 808:	4299      	cmp	r1, r3
 80a:	d9fb      	bls.n	804 <div_search1>
 80c:	e000      	b.n	810 <div_loop1a>

0000080e <div_loop1>:
 80e:	0849      	lsrs	r1, r1, #1

00000810 <div_loop1a>:
 810:	1a40      	subs	r0, r0, r1
 812:	d307      	bcc.n	824 <div1>

00000814 <div2>:
 814:	4152      	adcs	r2, r2
 816:	d3fa      	bcc.n	80e <div_loop1>
 818:	4601      	mov	r1, r0
 81a:	4610      	mov	r0, r2
 81c:	4770      	bx	lr

0000081e <div_loop2>:
 81e:	0849      	lsrs	r1, r1, #1
 820:	1840      	adds	r0, r0, r1
 822:	d2f7      	bcs.n	814 <div2>

00000824 <div1>:
 824:	1892      	adds	r2, r2, r2
 826:	d3fa      	bcc.n	81e <div_loop2>
 828:	1840      	adds	r0, r0, r1
 82a:	4601      	mov	r1, r0
 82c:	4610      	mov	r0, r2
 82e:	4770      	bx	lr

00000830 <idiv_negative>:
 830:	0fcb      	lsrs	r3, r1, #31
 832:	d000      	beq.n	836 <idiv_neg1>
 834:	4249      	negs	r1, r1

00000836 <idiv_neg1>:
 836:	1002      	asrs	r2, r0, #32
 838:	d500      	bpl.n	83c <idiv_neg2>
 83a:	4240      	negs	r0, r0

0000083c <idiv_neg2>:
 83c:	4053      	eors	r3, r2
 83e:	b508      	push	{r3, lr}
 840:	f7ff ffd4 	bl	7ec <__aeabi_uidiv>
 844:	bc0c      	pop	{r2, r3}

00000846 <idiv_sign>:
 846:	1052      	asrs	r2, r2, #1
 848:	d300      	bcc.n	84c <idiv_sign1>
 84a:	4240      	negs	r0, r0

0000084c <idiv_sign1>:
 84c:	2a00      	cmp	r2, #0
 84e:	d500      	bpl.n	852 <idiv_ret>
 850:	4249      	negs	r1, r1

00000852 <idiv_ret>:
 852:	4718      	bx	r3

00000854 <idiv_divzero>:
 854:	46f4      	mov	ip, lr
 856:	2000      	movs	r0, #0
 858:	f000 f801 	bl	85e <__aeabi_idiv0>
 85c:	4760      	bx	ip

0000085e <__aeabi_idiv0>:
 85e:	4770      	bx	lr
