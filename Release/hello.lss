
hello.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
   0:	00 10 00 10 0d 01 00 00 d5 00 00 00 d9 00 00 00     ................
	...
  2c:	dd 00 00 00 00 00 00 00 00 00 00 00 e1 00 00 00     ................
  3c:	01 03 00 00 51 01 00 00 51 01 00 00 51 01 00 00     ....Q...Q...Q...
  4c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
  5c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
  6c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
  7c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
  8c:	51 01 00 00 51 01 00 00 95 05 00 00 00 00 00 00     Q...Q...........
  9c:	00 00 00 00 51 01 00 00 51 01 00 00 51 01 00 00     ....Q...Q...Q...
  ac:	00 00 00 00 51 01 00 00 51 01 00 00 51 01 00 00     ....Q...Q...Q...
  bc:	51 01 00 00                                         Q...

000000c0 <__data_section_table>:
  c0:	00000870 	.word	0x00000870
  c4:	10000000 	.word	0x10000000
  c8:	00000008 	.word	0x00000008

000000cc <__bss_section_table>:
  cc:	10000008 	.word	0x10000008
  d0:	0000005c 	.word	0x0000005c

000000d4 <NMI_Handler>:
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void)
{
  d4:	b500      	push	{lr}
  d6:	e7fe      	b.n	d6 <NMI_Handler+0x2>

000000d8 <HardFault_Handler>:
    {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void)
{
  d8:	b500      	push	{lr}
  da:	e7fe      	b.n	da <HardFault_Handler+0x2>

000000dc <SVC_Handler>:
    {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void)
{
  dc:	b500      	push	{lr}
  de:	e7fe      	b.n	de <SVC_Handler+0x2>

000000e0 <PendSV_Handler>:
    {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void)
{
  e0:	b500      	push	{lr}
  e2:	e7fe      	b.n	e2 <PendSV_Handler+0x2>
    {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void)
{
  e4:	b500      	push	{lr}
  e6:	e7fe      	b.n	e6 <PendSV_Handler+0x6>

000000e8 <data_init>:
// are written as separate functions rather than being inlined within the
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
  e8:	b510      	push	{r4, lr}
	unsigned int *pulDest = (unsigned int*) start;
	unsigned int *pulSrc = (unsigned int*) romstart;
	unsigned int loop;
	for (loop = 0; loop < len; loop = loop + 4)
  ea:	2300      	movs	r3, #0
  ec:	e002      	b.n	f4 <data_init+0xc>
		*pulDest++ = *pulSrc++;
  ee:	581c      	ldr	r4, [r3, r0]
__attribute__ ((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
	unsigned int *pulDest = (unsigned int*) start;
	unsigned int *pulSrc = (unsigned int*) romstart;
	unsigned int loop;
	for (loop = 0; loop < len; loop = loop + 4)
  f0:	3304      	adds	r3, #4
		*pulDest++ = *pulSrc++;
  f2:	c110      	stmia	r1!, {r4}
__attribute__ ((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
	unsigned int *pulDest = (unsigned int*) start;
	unsigned int *pulSrc = (unsigned int*) romstart;
	unsigned int loop;
	for (loop = 0; loop < len; loop = loop + 4)
  f4:	4293      	cmp	r3, r2
  f6:	d3fa      	bcc.n	ee <data_init+0x6>
		*pulDest++ = *pulSrc++;
}
  f8:	bd10      	pop	{r4, pc}

000000fa <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
  fa:	b510      	push	{r4, lr}
	unsigned int *pulDest = (unsigned int*) start;
  fc:	1c03      	adds	r3, r0, #0
	unsigned int loop;
	for (loop = 0; loop < len; loop = loop + 4)
		*pulDest++ = 0;
  fe:	2200      	movs	r2, #0

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
	unsigned int *pulDest = (unsigned int*) start;
	unsigned int loop;
	for (loop = 0; loop < len; loop = loop + 4)
 100:	e000      	b.n	104 <bss_init+0xa>
		*pulDest++ = 0;
 102:	c304      	stmia	r3!, {r2}

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
	unsigned int *pulDest = (unsigned int*) start;
	unsigned int loop;
	for (loop = 0; loop < len; loop = loop + 4)
 104:	1a1c      	subs	r4, r3, r0
 106:	428c      	cmp	r4, r1
 108:	d3fb      	bcc.n	102 <bss_init+0x8>
		*pulDest++ = 0;
}
 10a:	bd10      	pop	{r4, pc}

0000010c <ResetISR>:
// Sets up a simple runtime environment and initializes the C/C++
// library.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void
ResetISR(void) {
 10c:	b538      	push	{r3, r4, r5, lr}
    //
	unsigned int LoadAddr, ExeAddr, SectionLen;
	unsigned int *SectionTableAddr;

	// Load base address of Global Section Table
	SectionTableAddr = &__data_section_table;
 10e:	4c0d      	ldr	r4, [pc, #52]	; (144 <ResetISR+0x38>)

    // Copy the data sections from flash to SRAM.
	while (SectionTableAddr < &__data_section_table_end) {
 110:	4d0d      	ldr	r5, [pc, #52]	; (148 <ResetISR+0x3c>)
 112:	e005      	b.n	120 <ResetISR+0x14>
		LoadAddr = *SectionTableAddr++;
 114:	6820      	ldr	r0, [r4, #0]
		ExeAddr = *SectionTableAddr++;
 116:	6861      	ldr	r1, [r4, #4]
		SectionLen = *SectionTableAddr++;
 118:	68a2      	ldr	r2, [r4, #8]
// Sets up a simple runtime environment and initializes the C/C++
// library.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void
ResetISR(void) {
 11a:	340c      	adds	r4, #12
    // Copy the data sections from flash to SRAM.
	while (SectionTableAddr < &__data_section_table_end) {
		LoadAddr = *SectionTableAddr++;
		ExeAddr = *SectionTableAddr++;
		SectionLen = *SectionTableAddr++;
		data_init(LoadAddr, ExeAddr, SectionLen);
 11c:	f7ff ffe4 	bl	e8 <data_init>

	// Load base address of Global Section Table
	SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
	while (SectionTableAddr < &__data_section_table_end) {
 120:	42ac      	cmp	r4, r5
 122:	d3f7      	bcc.n	114 <ResetISR+0x8>
 124:	e005      	b.n	132 <ResetISR+0x26>
		data_init(LoadAddr, ExeAddr, SectionLen);
	}
	// At this point, SectionTableAddr = &__bss_section_table;
	// Zero fill the bss segment
	while (SectionTableAddr < &__bss_section_table_end) {
		ExeAddr = *SectionTableAddr++;
 126:	6820      	ldr	r0, [r4, #0]
		SectionLen = *SectionTableAddr++;
 128:	6861      	ldr	r1, [r4, #4]
// Sets up a simple runtime environment and initializes the C/C++
// library.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void
ResetISR(void) {
 12a:	3408      	adds	r4, #8
	// At this point, SectionTableAddr = &__bss_section_table;
	// Zero fill the bss segment
	while (SectionTableAddr < &__bss_section_table_end) {
		ExeAddr = *SectionTableAddr++;
		SectionLen = *SectionTableAddr++;
		bss_init(ExeAddr, SectionLen);
 12c:	f7ff ffe5 	bl	fa <bss_init>
 130:	e000      	b.n	134 <ResetISR+0x28>
		SectionLen = *SectionTableAddr++;
		data_init(LoadAddr, ExeAddr, SectionLen);
	}
	// At this point, SectionTableAddr = &__bss_section_table;
	// Zero fill the bss segment
	while (SectionTableAddr < &__bss_section_table_end) {
 132:	4d06      	ldr	r5, [pc, #24]	; (14c <ResetISR+0x40>)
 134:	42ac      	cmp	r4, r5
 136:	d3f6      	bcc.n	126 <ResetISR+0x1a>
	SectionLen = (void*)EndAddr - (void*)ExeAddr;
	bss_init ((unsigned int)ExeAddr, SectionLen);
#endif

#ifdef __USE_CMSIS
	SystemInit();
 138:	f000 faf2 	bl	720 <SystemInit>
	__libc_init_array();
#endif

#if defined (__REDLIB__)
	// Call the Redlib library, which in turn calls main()
	__main() ;
 13c:	f000 fb38 	bl	7b0 <__weak_main>
 140:	e7fe      	b.n	140 <ResetISR+0x34>
 142:	46c0      	nop			; (mov r8, r8)
 144:	000000c0 	.word	0x000000c0
 148:	000000cc 	.word	0x000000cc
 14c:	000000d4 	.word	0x000000d4

00000150 <ADC_IRQHandler>:
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void)
{
 150:	b500      	push	{lr}
 152:	e7fe      	b.n	152 <ADC_IRQHandler+0x2>
 154:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 158:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 15c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 160:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 164:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 168:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 16c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 170:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 174:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 178:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 17c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 180:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 184:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 188:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 18c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 190:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 194:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 198:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 19c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 1fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 20c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 21c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 22c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 23c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 24c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 25c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 26c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 27c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 28c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 29c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 2f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000002fc <CRP_WORD>:
 2fc:	ffff ffff                                   ....

00000300 <SysTick_Handler>:
static uint16_t LEDcurve [] = {
		65535, 46340, 32767, 23170, 16383, 11585, 8192, 5792, 4096, 2896, 2047, 1448, 1024, 724, 512,
		362, 256, 181, 127, 90, 64, 45, 32, 23, 16, 11, 8, 6, 4, 3, 2, 1, 1
};

void SysTick_Handler (void) {           /* SysTick Interrupt Handler (~1ms)    */
 300:	b530      	push	{r4, r5, lr}
	SysTickCnt++;
 302:	4b1e      	ldr	r3, [pc, #120]	; (37c <SysTick_Handler+0x7c>)
 304:	681a      	ldr	r2, [r3, #0]
 306:	3201      	adds	r2, #1
 308:	601a      	str	r2, [r3, #0]

	if (PWMTickCnt >= 8) {
 30a:	4b1d      	ldr	r3, [pc, #116]	; (380 <SysTick_Handler+0x80>)
 30c:	681b      	ldr	r3, [r3, #0]
 30e:	2b07      	cmp	r3, #7
 310:	d92e      	bls.n	370 <SysTick_Handler+0x70>
		LPC_UART->IER = IER_THRE | IER_RLS;			/* Disable UART Interrupt Enable Register */
 312:	4c1c      	ldr	r4, [pc, #112]	; (384 <SysTick_Handler+0x84>)
 314:	2306      	movs	r3, #6
 316:	6063      	str	r3, [r4, #4]
//		if (LPC_TMR16B0->MR0 >= 1 ) {LPC_TMR16B0->MR0 /= 1.41421356237;} else { LPC_TMR16B0->MR0 = 0;}
//		if (LPC_TMR16B0->MR1 >= 1 ) {LPC_TMR16B0->MR1 /= 1.41421356237;} else { LPC_TMR16B0->MR1 = 0;}
//		if (LPC_TMR16B0->MR2 >= 1 ) {LPC_TMR16B0->MR2 /= 1.41421356237;} else { LPC_TMR16B0->MR2 = 0;}


		LPC_TMR16B0->MR0 = LEDcurve[LED0];
 318:	4b1b      	ldr	r3, [pc, #108]	; (388 <SysTick_Handler+0x88>)
 31a:	481c      	ldr	r0, [pc, #112]	; (38c <SysTick_Handler+0x8c>)
 31c:	881a      	ldrh	r2, [r3, #0]
 31e:	491c      	ldr	r1, [pc, #112]	; (390 <SysTick_Handler+0x90>)
 320:	0052      	lsls	r2, r2, #1
 322:	5a12      	ldrh	r2, [r2, r0]
 324:	618a      	str	r2, [r1, #24]
		LPC_TMR16B0->MR1 = LEDcurve[LED1];
 326:	4a1b      	ldr	r2, [pc, #108]	; (394 <SysTick_Handler+0x94>)
 328:	8815      	ldrh	r5, [r2, #0]
 32a:	006d      	lsls	r5, r5, #1
 32c:	5a2d      	ldrh	r5, [r5, r0]
 32e:	61cd      	str	r5, [r1, #28]
		LPC_TMR16B0->MR2 = LEDcurve[LED2];
 330:	4d19      	ldr	r5, [pc, #100]	; (398 <SysTick_Handler+0x98>)
 332:	882d      	ldrh	r5, [r5, #0]
 334:	006d      	lsls	r5, r5, #1
 336:	5a28      	ldrh	r0, [r5, r0]
 338:	6208      	str	r0, [r1, #32]

		if (LED0 < 32) {LED0++;}
 33a:	8819      	ldrh	r1, [r3, #0]
 33c:	291f      	cmp	r1, #31
 33e:	d803      	bhi.n	348 <SysTick_Handler+0x48>
 340:	8819      	ldrh	r1, [r3, #0]
 342:	3101      	adds	r1, #1
 344:	b289      	uxth	r1, r1
 346:	8019      	strh	r1, [r3, #0]
		if (LED1 < 32) {LED1++;}
 348:	8813      	ldrh	r3, [r2, #0]
 34a:	2b1f      	cmp	r3, #31
 34c:	d803      	bhi.n	356 <SysTick_Handler+0x56>
 34e:	8813      	ldrh	r3, [r2, #0]
 350:	3301      	adds	r3, #1
 352:	b29b      	uxth	r3, r3
 354:	8013      	strh	r3, [r2, #0]
		if (LED2 < 32) {LED2++;}
 356:	4b10      	ldr	r3, [pc, #64]	; (398 <SysTick_Handler+0x98>)
 358:	881a      	ldrh	r2, [r3, #0]
 35a:	2a1f      	cmp	r2, #31
 35c:	d803      	bhi.n	366 <SysTick_Handler+0x66>
 35e:	881a      	ldrh	r2, [r3, #0]
 360:	3201      	adds	r2, #1
 362:	b292      	uxth	r2, r2
 364:	801a      	strh	r2, [r3, #0]

		PWMTickCnt = 0;
 366:	4b06      	ldr	r3, [pc, #24]	; (380 <SysTick_Handler+0x80>)
 368:	2200      	movs	r2, #0
 36a:	601a      	str	r2, [r3, #0]
		LPC_UART->IER = IER_THRE | IER_RLS | IER_RBR;	/* Re-enable UART Interrupt Enable Register */
 36c:	2307      	movs	r3, #7
 36e:	6063      	str	r3, [r4, #4]
	}
	PWMTickCnt++;
 370:	4b03      	ldr	r3, [pc, #12]	; (380 <SysTick_Handler+0x80>)
 372:	681a      	ldr	r2, [r3, #0]
 374:	3201      	adds	r2, #1
 376:	601a      	str	r2, [r3, #0]



}
 378:	bd30      	pop	{r4, r5, pc}
 37a:	46c0      	nop			; (mov r8, r8)
 37c:	10000010 	.word	0x10000010
 380:	1000000c 	.word	0x1000000c
 384:	40008000 	.word	0x40008000
 388:	10000018 	.word	0x10000018
 38c:	0000082c 	.word	0x0000082c
 390:	4000c000 	.word	0x4000c000
 394:	10000008 	.word	0x10000008
 398:	1000000a 	.word	0x1000000a

0000039c <LEDinit>:
  //unsigned long tick_cnt = tick;
  systick = SysTickCnt;				//systickcnt has the start-up time
  while ((SysTickCnt - systick) < tick);
}

void LEDinit(void) {
 39c:	b510      	push	{r4, lr}

	// Pin 28 - PORT0 PIN7
	LPC_GPIO0->DIR |= (1<<7); /* GPIOX_X as output */
 39e:	23a0      	movs	r3, #160	; 0xa0
 3a0:	2180      	movs	r1, #128	; 0x80
 3a2:	05db      	lsls	r3, r3, #23
 3a4:	0209      	lsls	r1, r1, #8
 3a6:	585a      	ldr	r2, [r3, r1]
 3a8:	2080      	movs	r0, #128	; 0x80
 3aa:	4302      	orrs	r2, r0
 3ac:	505a      	str	r2, [r3, r1]
	LPC_GPIO0->DATA |= (1<<7); /* set GPIOX_X */
 3ae:	4a06      	ldr	r2, [pc, #24]	; (3c8 <LEDinit+0x2c>)
 3b0:	589c      	ldr	r4, [r3, r2]
 3b2:	4320      	orrs	r0, r4
 3b4:	5098      	str	r0, [r3, r2]

	// Pin 26 - PORT0 PIN3
	LPC_GPIO0->DIR |= (1<<3); /* GPIOX_X as output */
 3b6:	585c      	ldr	r4, [r3, r1]
 3b8:	2008      	movs	r0, #8
 3ba:	4304      	orrs	r4, r0
 3bc:	505c      	str	r4, [r3, r1]
	LPC_GPIO0->DATA |= (1<<3); /* set GPIOX_X */
 3be:	5899      	ldr	r1, [r3, r2]
 3c0:	4308      	orrs	r0, r1
 3c2:	5098      	str	r0, [r3, r2]
	// Examples
	//LPC_GPIO0->OUT ^= (1<<3); /* toggle GPIOX_X */
	//LPC_GPIO0->OUT &= ~(1<<3); /* clear GPIOX_X */
}
 3c4:	bd10      	pop	{r4, pc}
 3c6:	46c0      	nop			; (mov r8, r8)
 3c8:	00003ffc 	.word	0x00003ffc

000003cc <TMR16init>:

void TMR16init() {
	// System AHB clock control register - Enable Timer16B0 Table 21, P30 in user manual
	LPC_SYSCON->SYSAHBCLKCTRL |= (1 << 7);
 3cc:	4b13      	ldr	r3, [pc, #76]	; (41c <TMR16init+0x50>)
 3ce:	2180      	movs	r1, #128	; 0x80
 3d0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
	/* IOCON_PIO0_8 register - Enable CT16B0_MAT0 pin p85*/
	LPC_IOCON->PIO0_8 |= (1<<1); // enabling bit 1 sets match pin
	/* IOCON_PIO0_8 register - Enable CT16B0_MAT0 pin p85*/
	LPC_IOCON->PIO0_9 |= (1<<1); // enabling bit 1 sets match pin
	/* IOCON_PIO0_8 register - Enable CT16B0_MAT1 pin p85*/
	LPC_IOCON->SWCLK_PIO0_10 |= (6>>1); // enabling bit 1 sets match pin
 3d2:	2003      	movs	r0, #3
	//LPC_GPIO0->OUT &= ~(1<<3); /* clear GPIOX_X */
}

void TMR16init() {
	// System AHB clock control register - Enable Timer16B0 Table 21, P30 in user manual
	LPC_SYSCON->SYSAHBCLKCTRL |= (1 << 7);
 3d4:	430a      	orrs	r2, r1
 3d6:	67da      	str	r2, [r3, #124]	; 0x7c
	/* IOCON_PIO0_8 register - Enable CT16B0_MAT0 pin p85*/
	LPC_IOCON->PIO0_8 |= (1<<1); // enabling bit 1 sets match pin
 3d8:	4b11      	ldr	r3, [pc, #68]	; (420 <TMR16init+0x54>)
 3da:	2202      	movs	r2, #2
 3dc:	6e19      	ldr	r1, [r3, #96]	; 0x60
 3de:	4311      	orrs	r1, r2
 3e0:	6619      	str	r1, [r3, #96]	; 0x60
	/* IOCON_PIO0_8 register - Enable CT16B0_MAT0 pin p85*/
	LPC_IOCON->PIO0_9 |= (1<<1); // enabling bit 1 sets match pin
 3e2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 3e4:	4311      	orrs	r1, r2
 3e6:	6659      	str	r1, [r3, #100]	; 0x64
	/* IOCON_PIO0_8 register - Enable CT16B0_MAT1 pin p85*/
	LPC_IOCON->SWCLK_PIO0_10 |= (6>>1); // enabling bit 1 sets match pin
 3e8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 3ea:	4301      	orrs	r1, r0
 3ec:	6699      	str	r1, [r3, #104]	; 0x68

	/* Enable PWM function on all CT16B0_MATx pins */
	LPC_TMR16B0->PWMC |= 0b111; // 65535 16bit TOP 1800hz?
 3ee:	4b0d      	ldr	r3, [pc, #52]	; (424 <TMR16init+0x58>)
 3f0:	2007      	movs	r0, #7
 3f2:	6f59      	ldr	r1, [r3, #116]	; 0x74
 3f4:	4301      	orrs	r1, r0
 3f6:	6759      	str	r1, [r3, #116]	; 0x74

	/* Set the PWM frequency */
	unsigned int Frequency = 0xFFFF;
	LPC_TMR16B0->MR3 = Frequency; // p.327 in UM
 3f8:	490b      	ldr	r1, [pc, #44]	; (428 <TMR16init+0x5c>)
 3fa:	6259      	str	r1, [r3, #36]	; 0x24
	/* Set initial duty cycle */
	LPC_TMR16B0->MR0 = Frequency / 2; // p.327 in UM
 3fc:	490b      	ldr	r1, [pc, #44]	; (42c <TMR16init+0x60>)
 3fe:	6199      	str	r1, [r3, #24]
	LPC_TMR16B0->MR1 = Frequency / 2;
 400:	61d9      	str	r1, [r3, #28]
	LPC_TMR16B0->MR2 = Frequency / 2;
 402:	6219      	str	r1, [r3, #32]
	/* TMR16B0MCR - Reset on MR3 p.330 in UM */
	LPC_TMR16B0->MCR |= (1<<10); // Reset on MR3: the TC will be reset if MR3 matches it.
 404:	6958      	ldr	r0, [r3, #20]
 406:	2180      	movs	r1, #128	; 0x80
 408:	00c9      	lsls	r1, r1, #3
 40a:	4301      	orrs	r1, r0
 40c:	6159      	str	r1, [r3, #20]
	LPC_TMR16B0->PR = 6; // The 16-bit Prescale Register specifies the maximum value for the Prescale Counter.
 40e:	2106      	movs	r1, #6
 410:	60d9      	str	r1, [r3, #12]
	LPC_TMR16B0->PC = 2; // Prescale Counter register
 412:	611a      	str	r2, [r3, #16]
	/* Count Control Register (TMR16B0TCR - Start Timer16B0 p.329 in UM */
	LPC_TMR16B0->TCR = 1;// |= (1<<1);
 414:	2201      	movs	r2, #1
 416:	605a      	str	r2, [r3, #4]
}
 418:	4770      	bx	lr
 41a:	46c0      	nop			; (mov r8, r8)
 41c:	40048004 	.word	0x40048004
 420:	40044000 	.word	0x40044000
 424:	4000c000 	.word	0x4000c000
 428:	0000ffff 	.word	0x0000ffff
 42c:	00007fff 	.word	0x00007fff

00000430 <beatLight>:

void beatLight() {
 430:	b500      	push	{lr}
	LPC_UART->IER = IER_THRE | IER_RLS;			/* Disable UART Interrupt Enable Register */
 432:	4915      	ldr	r1, [pc, #84]	; (488 <beatLight+0x58>)
 434:	2306      	movs	r3, #6
	if (ClockTickCnt == 0) {
 436:	4a15      	ldr	r2, [pc, #84]	; (48c <beatLight+0x5c>)
	/* Count Control Register (TMR16B0TCR - Start Timer16B0 p.329 in UM */
	LPC_TMR16B0->TCR = 1;// |= (1<<1);
}

void beatLight() {
	LPC_UART->IER = IER_THRE | IER_RLS;			/* Disable UART Interrupt Enable Register */
 438:	604b      	str	r3, [r1, #4]
	if (ClockTickCnt == 0) {
 43a:	6813      	ldr	r3, [r2, #0]
 43c:	2b00      	cmp	r3, #0
 43e:	d105      	bne.n	44c <beatLight+0x1c>
//	LPC_TMR16B0->MR0 = 0xFFFF;
//	LPC_TMR16B0->MR1 = 0xFFFF;
//	LPC_TMR16B0->MR2 = 0xFFFF;
	LED0 = 0;
 440:	4813      	ldr	r0, [pc, #76]	; (490 <beatLight+0x60>)
 442:	8003      	strh	r3, [r0, #0]
	LED1 = 0;
 444:	4813      	ldr	r0, [pc, #76]	; (494 <beatLight+0x64>)
 446:	8003      	strh	r3, [r0, #0]
	LED2 = 0;
 448:	4813      	ldr	r0, [pc, #76]	; (498 <beatLight+0x68>)
 44a:	8003      	strh	r3, [r0, #0]
	}
	ClockTickCnt++;
 44c:	6813      	ldr	r3, [r2, #0]
 44e:	3301      	adds	r3, #1
 450:	6013      	str	r3, [r2, #0]
	if (ClockTickCnt == 24) {LED0 = 0;}//LPC_TMR16B0->MR0 = 0xFFFF;}
 452:	6813      	ldr	r3, [r2, #0]
 454:	2b18      	cmp	r3, #24
 456:	d102      	bne.n	45e <beatLight+0x2e>
 458:	4b0d      	ldr	r3, [pc, #52]	; (490 <beatLight+0x60>)
 45a:	2200      	movs	r2, #0
 45c:	801a      	strh	r2, [r3, #0]
	if (ClockTickCnt == 48) {LED1 = 0;}//{LPC_TMR16B0->MR1 = 0xFFFF;}
 45e:	4b0b      	ldr	r3, [pc, #44]	; (48c <beatLight+0x5c>)
 460:	681a      	ldr	r2, [r3, #0]
 462:	2a30      	cmp	r2, #48	; 0x30
 464:	d102      	bne.n	46c <beatLight+0x3c>
 466:	4a0b      	ldr	r2, [pc, #44]	; (494 <beatLight+0x64>)
 468:	2000      	movs	r0, #0
 46a:	8010      	strh	r0, [r2, #0]
	if (ClockTickCnt == 72) {LED2 = 0;}//{LPC_TMR16B0->MR2 = 0xFFFF;}
 46c:	681a      	ldr	r2, [r3, #0]
 46e:	2a48      	cmp	r2, #72	; 0x48
 470:	d102      	bne.n	478 <beatLight+0x48>
 472:	4a09      	ldr	r2, [pc, #36]	; (498 <beatLight+0x68>)
 474:	2000      	movs	r0, #0
 476:	8010      	strh	r0, [r2, #0]
	if (ClockTickCnt == 96) {ClockTickCnt = 0;}
 478:	681a      	ldr	r2, [r3, #0]
 47a:	2a60      	cmp	r2, #96	; 0x60
 47c:	d101      	bne.n	482 <beatLight+0x52>
 47e:	2200      	movs	r2, #0
 480:	601a      	str	r2, [r3, #0]
	LPC_UART->IER = IER_THRE | IER_RLS | IER_RBR;	/* Re-enable UART Interrupt Enable Register */
 482:	2307      	movs	r3, #7
 484:	604b      	str	r3, [r1, #4]
}
 486:	bd00      	pop	{pc}
 488:	40008000 	.word	0x40008000
 48c:	10000014 	.word	0x10000014
 490:	10000018 	.word	0x10000018
 494:	10000008 	.word	0x10000008
 498:	1000000a 	.word	0x1000000a

0000049c <songStop>:
void songStart() {
	ClockTickCnt = 0; // reset clock start
}

void songStop() {
	LPC_TMR16B0->MR0 = 0;
 49c:	4a03      	ldr	r2, [pc, #12]	; (4ac <songStop+0x10>)
 49e:	2300      	movs	r3, #0
 4a0:	6193      	str	r3, [r2, #24]
	LPC_TMR16B0->MR1 = 0;
 4a2:	61d3      	str	r3, [r2, #28]
	LPC_TMR16B0->MR2 = 0;
 4a4:	6213      	str	r3, [r2, #32]
	ClockTickCnt = 0; // reset clock start
 4a6:	4a02      	ldr	r2, [pc, #8]	; (4b0 <songStop+0x14>)
 4a8:	6013      	str	r3, [r2, #0]
}
 4aa:	4770      	bx	lr
 4ac:	4000c000 	.word	0x4000c000
 4b0:	10000014 	.word	0x10000014

000004b4 <main>:

int main(void) {
 4b4:	b570      	push	{r4, r5, r6, lr}

	SystemInit();
 4b6:	f000 f933 	bl	720 <SystemInit>
	SysTick_Config(SystemCoreClock/1000 - 1); // sets up our delay timer
 4ba:	4b2c      	ldr	r3, [pc, #176]	; (56c <main+0xb8>)
 4bc:	21fa      	movs	r1, #250	; 0xfa
 4be:	6818      	ldr	r0, [r3, #0]
 4c0:	0089      	lsls	r1, r1, #2
 4c2:	f000 f979 	bl	7b8 <__aeabi_uidiv>
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 4c6:	4b2a      	ldr	r3, [pc, #168]	; (570 <main+0xbc>)
 4c8:	1e42      	subs	r2, r0, #1
 4ca:	429a      	cmp	r2, r3
 4cc:	d80e      	bhi.n	4ec <main+0x38>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 4ce:	4b29      	ldr	r3, [pc, #164]	; (574 <main+0xc0>)
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 4d0:	4a29      	ldr	r2, [pc, #164]	; (578 <main+0xc4>)
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 4d2:	3802      	subs	r0, #2
 4d4:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 4d6:	6a10      	ldr	r0, [r2, #32]
 4d8:	21c0      	movs	r1, #192	; 0xc0
 4da:	0200      	lsls	r0, r0, #8
 4dc:	0a00      	lsrs	r0, r0, #8
 4de:	0609      	lsls	r1, r1, #24
 4e0:	4301      	orrs	r1, r0
 4e2:	6211      	str	r1, [r2, #32]
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 4e4:	2200      	movs	r2, #0
 4e6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 4e8:	2207      	movs	r2, #7
 4ea:	601a      	str	r2, [r3, #0]
	LEDinit();
 4ec:	f7ff ff56 	bl	39c <LEDinit>
	TMR16init();
 4f0:	f7ff ff6c 	bl	3cc <TMR16init>
	UARTInit(UART_BAUD);
 4f4:	4821      	ldr	r0, [pc, #132]	; (57c <main+0xc8>)
 4f6:	f000 f89b 	bl	630 <UARTInit>
	while(1) {
		//Delay(1000);

		while (UARTCount > 0) {
			LPC_UART->IER = IER_THRE | IER_RLS;			/* Disable UART Interrupt Enable Register */
 4fa:	4e21      	ldr	r6, [pc, #132]	; (580 <main+0xcc>)
	TMR16init();
	UARTInit(UART_BAUD);
	while(1) {
		//Delay(1000);

		while (UARTCount > 0) {
 4fc:	4c21      	ldr	r4, [pc, #132]	; (584 <main+0xd0>)
 4fe:	e031      	b.n	564 <main+0xb0>
			LPC_UART->IER = IER_THRE | IER_RLS;			/* Disable UART Interrupt Enable Register */
 500:	2306      	movs	r3, #6
			switch ( *UARTBuffer ) {
 502:	4d21      	ldr	r5, [pc, #132]	; (588 <main+0xd4>)
	UARTInit(UART_BAUD);
	while(1) {
		//Delay(1000);

		while (UARTCount > 0) {
			LPC_UART->IER = IER_THRE | IER_RLS;			/* Disable UART Interrupt Enable Register */
 504:	6073      	str	r3, [r6, #4]
			switch ( *UARTBuffer ) {
 506:	782b      	ldrb	r3, [r5, #0]
 508:	2bfa      	cmp	r3, #250	; 0xfa
 50a:	d004      	beq.n	516 <main+0x62>
 50c:	2bfc      	cmp	r3, #252	; 0xfc
 50e:	d016      	beq.n	53e <main+0x8a>
 510:	2bf8      	cmp	r3, #248	; 0xf8
 512:	d11d      	bne.n	550 <main+0x9c>
 514:	e00e      	b.n	534 <main+0x80>
	//						*UARTBuffer = *(UARTBuffer+1);
	//						UARTCount-=3;
	//					}
	//				  break;
			case 0xfa:
				LPC_GPIO0->DATA ^= (1<<3); /* toggle GPIOX_X */
 516:	4b1d      	ldr	r3, [pc, #116]	; (58c <main+0xd8>)
 518:	22a0      	movs	r2, #160	; 0xa0
 51a:	05d2      	lsls	r2, r2, #23
 51c:	58d1      	ldr	r1, [r2, r3]
 51e:	2008      	movs	r0, #8
 520:	4041      	eors	r1, r0
 522:	50d1      	str	r1, [r2, r3]
				UARTSend( (uint8_t *)UARTBuffer, 1 );
 524:	1c28      	adds	r0, r5, #0
 526:	2101      	movs	r1, #1
 528:	f000 f8e8 	bl	6fc <UARTSend>
	if (ClockTickCnt == 96) {ClockTickCnt = 0;}
	LPC_UART->IER = IER_THRE | IER_RLS | IER_RBR;	/* Re-enable UART Interrupt Enable Register */
}

void songStart() {
	ClockTickCnt = 0; // reset clock start
 52c:	4b18      	ldr	r3, [pc, #96]	; (590 <main+0xdc>)
 52e:	2200      	movs	r2, #0
 530:	601a      	str	r2, [r3, #0]
 532:	e011      	b.n	558 <main+0xa4>
				UARTSend( (uint8_t *)UARTBuffer, 1 );
				songStart();
				UARTCount--;
			  break;
			case 0xf8:
				beatLight();
 534:	f7ff ff7c 	bl	430 <beatLight>
				//LPC_GPIO0->DATA ^= (1<<3); /* toggle GPIOX_X */
				//UARTSend( (uint8_t *)UARTBuffer, 1 );
				*UARTBuffer = *(UARTBuffer+1);
 538:	786b      	ldrb	r3, [r5, #1]
 53a:	702b      	strb	r3, [r5, #0]
 53c:	e00c      	b.n	558 <main+0xa4>
				UARTCount--;
			  break;
			case 0xfc:
				LPC_GPIO0->DATA &= ~(1<<3); /* clear GPIOX_X */
 53e:	4b13      	ldr	r3, [pc, #76]	; (58c <main+0xd8>)
 540:	22a0      	movs	r2, #160	; 0xa0
 542:	05d2      	lsls	r2, r2, #23
 544:	58d1      	ldr	r1, [r2, r3]
 546:	2008      	movs	r0, #8
 548:	4381      	bics	r1, r0
 54a:	50d1      	str	r1, [r2, r3]
				songStop();
 54c:	f7ff ffa6 	bl	49c <songStop>
				UARTSend( (uint8_t *)UARTBuffer, 1 );
				UARTCount--;
			  break;
			default:
				UARTSend( (uint8_t *)UARTBuffer, 1 );
 550:	1c28      	adds	r0, r5, #0
 552:	2101      	movs	r1, #1
 554:	f000 f8d2 	bl	6fc <UARTSend>
				UARTCount--;
 558:	6823      	ldr	r3, [r4, #0]
			  break;
			}
			LPC_UART->IER = IER_THRE | IER_RLS | IER_RBR;	/* Re-enable UART Interrupt Enable Register */
 55a:	2207      	movs	r2, #7
				UARTSend( (uint8_t *)UARTBuffer, 1 );
				UARTCount--;
			  break;
			default:
				UARTSend( (uint8_t *)UARTBuffer, 1 );
				UARTCount--;
 55c:	3b01      	subs	r3, #1
 55e:	6023      	str	r3, [r4, #0]
			  break;
			}
			LPC_UART->IER = IER_THRE | IER_RLS | IER_RBR;	/* Re-enable UART Interrupt Enable Register */
 560:	4b07      	ldr	r3, [pc, #28]	; (580 <main+0xcc>)
 562:	605a      	str	r2, [r3, #4]
	TMR16init();
	UARTInit(UART_BAUD);
	while(1) {
		//Delay(1000);

		while (UARTCount > 0) {
 564:	6823      	ldr	r3, [r4, #0]
 566:	2b00      	cmp	r3, #0
 568:	d0fc      	beq.n	564 <main+0xb0>
 56a:	e7c9      	b.n	500 <main+0x4c>
 56c:	10000004 	.word	0x10000004
 570:	00ffffff 	.word	0x00ffffff
 574:	e000e010 	.word	0xe000e010
 578:	e000ed00 	.word	0xe000ed00
 57c:	00007a12 	.word	0x00007a12
 580:	40008000 	.word	0x40008000
 584:	1000001c 	.word	0x1000001c
 588:	10000020 	.word	0x10000020
 58c:	00003ffc 	.word	0x00003ffc
 590:	10000014 	.word	0x10000014

00000594 <UART_IRQHandler>:
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void UART_IRQHandler(void)
{
 594:	b510      	push	{r4, lr}
  uint8_t IIRValue, LSRValue;
  uint8_t Dummy = Dummy;

  IIRValue = LPC_UART->IIR;
 596:	4b21      	ldr	r3, [pc, #132]	; (61c <UART_IRQHandler+0x88>)
 598:	689a      	ldr	r2, [r3, #8]
    
  IIRValue >>= 1;			/* skip pending bit in IIR */
  IIRValue &= 0x07;			/* check bit 1~3, interrupt identification */
 59a:	0712      	lsls	r2, r2, #28
 59c:	0f52      	lsrs	r2, r2, #29
  if (IIRValue == IIR_RLS)		/* Receive Line Status */
 59e:	2a03      	cmp	r2, #3
 5a0:	d117      	bne.n	5d2 <UART_IRQHandler+0x3e>
  {
    LSRValue = LPC_UART->LSR;
 5a2:	695a      	ldr	r2, [r3, #20]
    /* Receive Line Status */
    if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI))
 5a4:	219e      	movs	r1, #158	; 0x9e
    
  IIRValue >>= 1;			/* skip pending bit in IIR */
  IIRValue &= 0x07;			/* check bit 1~3, interrupt identification */
  if (IIRValue == IIR_RLS)		/* Receive Line Status */
  {
    LSRValue = LPC_UART->LSR;
 5a6:	b2d2      	uxtb	r2, r2
    /* Receive Line Status */
    if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI))
 5a8:	4011      	ands	r1, r2
 5aa:	d003      	beq.n	5b4 <UART_IRQHandler+0x20>
    {
      /* There are errors or break interrupt */
      /* Read LSR will clear the interrupt */
      UARTStatus = LSRValue;
 5ac:	491c      	ldr	r1, [pc, #112]	; (620 <UART_IRQHandler+0x8c>)
 5ae:	600a      	str	r2, [r1, #0]
      Dummy = LPC_UART->RBR;	/* Dummy read on RX to clear 
 5b0:	681b      	ldr	r3, [r3, #0]
								interrupt, then bail out */
      return;
 5b2:	e031      	b.n	618 <UART_IRQHandler+0x84>
    }
    if (LSRValue & LSR_RDR)	/* Receive Data Ready */			
 5b4:	07d0      	lsls	r0, r2, #31
 5b6:	d52f      	bpl.n	618 <UART_IRQHandler+0x84>
    {
      /* If no error on RLS, normal ready, save into the data buffer. */
      /* Note: read RBR will clear the interrupt */
      UARTBuffer[UARTCount++] = LPC_UART->RBR;
 5b8:	4a1a      	ldr	r2, [pc, #104]	; (624 <UART_IRQHandler+0x90>)
 5ba:	6810      	ldr	r0, [r2, #0]
 5bc:	681c      	ldr	r4, [r3, #0]
 5be:	4b1a      	ldr	r3, [pc, #104]	; (628 <UART_IRQHandler+0x94>)
 5c0:	b2e4      	uxtb	r4, r4
 5c2:	541c      	strb	r4, [r3, r0]
 5c4:	3001      	adds	r0, #1
 5c6:	6010      	str	r0, [r2, #0]
      if (UARTCount == BUFSIZE)
 5c8:	6813      	ldr	r3, [r2, #0]
 5ca:	2b40      	cmp	r3, #64	; 0x40
 5cc:	d124      	bne.n	618 <UART_IRQHandler+0x84>
      {
        UARTCount = 0;		/* buffer overflow */
 5ce:	6011      	str	r1, [r2, #0]
 5d0:	e022      	b.n	618 <UART_IRQHandler+0x84>
      }	
    }
  }
  else if (IIRValue == IIR_RDA)	/* Receive Data Available */
 5d2:	2a02      	cmp	r2, #2
 5d4:	d10d      	bne.n	5f2 <UART_IRQHandler+0x5e>
  {
    /* Receive Data Available */
    UARTBuffer[UARTCount++] = LPC_UART->RBR;
 5d6:	4a13      	ldr	r2, [pc, #76]	; (624 <UART_IRQHandler+0x90>)
 5d8:	6811      	ldr	r1, [r2, #0]
 5da:	6818      	ldr	r0, [r3, #0]
 5dc:	4b12      	ldr	r3, [pc, #72]	; (628 <UART_IRQHandler+0x94>)
 5de:	b2c0      	uxtb	r0, r0
 5e0:	5458      	strb	r0, [r3, r1]
 5e2:	3101      	adds	r1, #1
 5e4:	6011      	str	r1, [r2, #0]
    if (UARTCount == BUFSIZE)
 5e6:	6813      	ldr	r3, [r2, #0]
 5e8:	2b40      	cmp	r3, #64	; 0x40
 5ea:	d115      	bne.n	618 <UART_IRQHandler+0x84>
    {
      UARTCount = 0;		/* buffer overflow */
 5ec:	2300      	movs	r3, #0
 5ee:	6013      	str	r3, [r2, #0]
 5f0:	e012      	b.n	618 <UART_IRQHandler+0x84>
    }
  }
  else if (IIRValue == IIR_CTI)	/* Character timeout indicator */
 5f2:	2a06      	cmp	r2, #6
 5f4:	d106      	bne.n	604 <UART_IRQHandler+0x70>
  {
    /* Character Time-out indicator */
    UARTStatus |= 0x100;		/* Bit 9 as the CTI error */
 5f6:	4b0a      	ldr	r3, [pc, #40]	; (620 <UART_IRQHandler+0x8c>)
 5f8:	2280      	movs	r2, #128	; 0x80
 5fa:	6819      	ldr	r1, [r3, #0]
 5fc:	0052      	lsls	r2, r2, #1
 5fe:	430a      	orrs	r2, r1
 600:	601a      	str	r2, [r3, #0]
 602:	e009      	b.n	618 <UART_IRQHandler+0x84>
  }
  else if (IIRValue == IIR_THRE)	/* THRE, transmit holding register empty */
 604:	2a01      	cmp	r2, #1
 606:	d107      	bne.n	618 <UART_IRQHandler+0x84>
  {
    /* THRE interrupt */
    LSRValue = LPC_UART->LSR;		/* Check status in the LSR to see if
 608:	6959      	ldr	r1, [r3, #20]
								valid data in U0THR or not */
    if (LSRValue & LSR_THRE)
 60a:	2320      	movs	r3, #32
 60c:	4019      	ands	r1, r3
 60e:	4b07      	ldr	r3, [pc, #28]	; (62c <UART_IRQHandler+0x98>)
 610:	d001      	beq.n	616 <UART_IRQHandler+0x82>
    {
      UARTTxEmpty = 1;
 612:	701a      	strb	r2, [r3, #0]
 614:	e000      	b.n	618 <UART_IRQHandler+0x84>
    }
    else
    {
      UARTTxEmpty = 0;
 616:	7019      	strb	r1, [r3, #0]
    }
  }
  return;
}
 618:	bd10      	pop	{r4, pc}
 61a:	46c0      	nop			; (mov r8, r8)
 61c:	40008000 	.word	0x40008000
 620:	10000060 	.word	0x10000060
 624:	1000001c 	.word	0x1000001c
 628:	10000020 	.word	0x10000020
 62c:	10000000 	.word	0x10000000

00000630 <UARTInit>:
** parameters:			UART baudrate
** Returned value:		None
** 
*****************************************************************************/
void UARTInit(uint32_t baudrate)
{
 630:	b570      	push	{r4, r5, r6, lr}
  uint32_t Fdiv;
  uint32_t regVal;

  UARTTxEmpty = 1;
 632:	4a27      	ldr	r2, [pc, #156]	; (6d0 <UARTInit+0xa0>)
 634:	2301      	movs	r3, #1
 636:	7013      	strb	r3, [r2, #0]
  UARTCount = 0;
 638:	4a26      	ldr	r2, [pc, #152]	; (6d4 <UARTInit+0xa4>)
 63a:	2100      	movs	r1, #0
 63c:	6011      	str	r1, [r2, #0]

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 63e:	4a26      	ldr	r2, [pc, #152]	; (6d8 <UARTInit+0xa8>)
 640:	2180      	movs	r1, #128	; 0x80
 642:	0389      	lsls	r1, r1, #14
 644:	67d1      	str	r1, [r2, #124]	; 0x7c
  
  NVIC_DisableIRQ(UART_IRQn);

  LPC_IOCON->PIO1_6 &= ~0x07;    /*  UART I/O config */
 646:	4a25      	ldr	r2, [pc, #148]	; (6dc <UARTInit+0xac>)
 648:	2507      	movs	r5, #7
 64a:	6811      	ldr	r1, [r2, #0]
** parameters:			UART baudrate
** Returned value:		None
** 
*****************************************************************************/
void UARTInit(uint32_t baudrate)
{
 64c:	1c06      	adds	r6, r0, #0
  UARTTxEmpty = 1;
  UARTCount = 0;
  
  NVIC_DisableIRQ(UART_IRQn);

  LPC_IOCON->PIO1_6 &= ~0x07;    /*  UART I/O config */
 64e:	43a9      	bics	r1, r5
 650:	6011      	str	r1, [r2, #0]
  LPC_IOCON->PIO1_6 |= 0x01;     /* UART RXD */
 652:	6811      	ldr	r1, [r2, #0]
  LPC_IOCON->PIO1_7 |= 0x01;     /* UART TXD */
  /* Enable UART clock */
  LPC_SYSCON->SYSAHBCLKCTRL |= (1<<12);
  LPC_SYSCON->UARTCLKDIV = 0x1;     /* divided by 1 */

  LPC_UART->LCR = 0x83;             /* 8 bits, no Parity, 1 Stop bit */
 654:	4c22      	ldr	r4, [pc, #136]	; (6e0 <UARTInit+0xb0>)
  UARTCount = 0;
  
  NVIC_DisableIRQ(UART_IRQn);

  LPC_IOCON->PIO1_6 &= ~0x07;    /*  UART I/O config */
  LPC_IOCON->PIO1_6 |= 0x01;     /* UART RXD */
 656:	4319      	orrs	r1, r3
 658:	6011      	str	r1, [r2, #0]
  LPC_IOCON->PIO1_7 &= ~0x07;	
 65a:	4a22      	ldr	r2, [pc, #136]	; (6e4 <UARTInit+0xb4>)
 65c:	6811      	ldr	r1, [r2, #0]
 65e:	43a9      	bics	r1, r5
 660:	6011      	str	r1, [r2, #0]
  LPC_IOCON->PIO1_7 |= 0x01;     /* UART TXD */
 662:	6811      	ldr	r1, [r2, #0]
 664:	4319      	orrs	r1, r3
 666:	6011      	str	r1, [r2, #0]
  /* Enable UART clock */
  LPC_SYSCON->SYSAHBCLKCTRL |= (1<<12);
 668:	4a1f      	ldr	r2, [pc, #124]	; (6e8 <UARTInit+0xb8>)
 66a:	2180      	movs	r1, #128	; 0x80
 66c:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 66e:	0149      	lsls	r1, r1, #5
 670:	4301      	orrs	r1, r0
 672:	67d1      	str	r1, [r2, #124]	; 0x7c
  LPC_SYSCON->UARTCLKDIV = 0x1;     /* divided by 1 */
 674:	4a1d      	ldr	r2, [pc, #116]	; (6ec <UARTInit+0xbc>)
 676:	6013      	str	r3, [r2, #0]

  LPC_UART->LCR = 0x83;             /* 8 bits, no Parity, 1 Stop bit */
 678:	2383      	movs	r3, #131	; 0x83
 67a:	60e3      	str	r3, [r4, #12]
  regVal = LPC_SYSCON->UARTCLKDIV;
 67c:	6811      	ldr	r1, [r2, #0]

  Fdiv = (((SystemCoreClock*LPC_SYSCON->SYSAHBCLKDIV)/regVal)/16)/baudrate ;	/*baud rate */
 67e:	4b1c      	ldr	r3, [pc, #112]	; (6f0 <UARTInit+0xc0>)
 680:	4a1c      	ldr	r2, [pc, #112]	; (6f4 <UARTInit+0xc4>)
 682:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 684:	6810      	ldr	r0, [r2, #0]
 686:	4358      	muls	r0, r3
 688:	f000 f896 	bl	7b8 <__aeabi_uidiv>
 68c:	1c31      	adds	r1, r6, #0
 68e:	0900      	lsrs	r0, r0, #4
 690:	f000 f892 	bl	7b8 <__aeabi_uidiv>

  LPC_UART->DLM = Fdiv / 256;							
 694:	0a03      	lsrs	r3, r0, #8
 696:	6063      	str	r3, [r4, #4]
  LPC_UART->DLL = Fdiv % 256;
 698:	b2c0      	uxtb	r0, r0
  LPC_UART->LCR = 0x03;		/* DLAB = 0 */
 69a:	2303      	movs	r3, #3
  regVal = LPC_SYSCON->UARTCLKDIV;

  Fdiv = (((SystemCoreClock*LPC_SYSCON->SYSAHBCLKDIV)/regVal)/16)/baudrate ;	/*baud rate */

  LPC_UART->DLM = Fdiv / 256;							
  LPC_UART->DLL = Fdiv % 256;
 69c:	6020      	str	r0, [r4, #0]
  LPC_UART->LCR = 0x03;		/* DLAB = 0 */
 69e:	60e3      	str	r3, [r4, #12]
  LPC_UART->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
 6a0:	60a5      	str	r5, [r4, #8]

  /* Read to clear the line status. */
  regVal = LPC_UART->LSR;
 6a2:	6963      	ldr	r3, [r4, #20]

  /* Ensure a clean start, no data in either TX or RX FIFO. */
// CodeRed - added parentheses around comparison in operand of &
  while (( LPC_UART->LSR & (LSR_THRE|LSR_TEMT)) != (LSR_THRE|LSR_TEMT) );
 6a4:	2360      	movs	r3, #96	; 0x60
 6a6:	6962      	ldr	r2, [r4, #20]
 6a8:	401a      	ands	r2, r3
 6aa:	2a60      	cmp	r2, #96	; 0x60
 6ac:	d1fb      	bne.n	6a6 <UARTInit+0x76>
 6ae:	e001      	b.n	6b4 <UARTInit+0x84>
  while ( LPC_UART->LSR & LSR_RDR )
  {
	regVal = LPC_UART->RBR;	/* Dump data from RX FIFO */
 6b0:	6811      	ldr	r1, [r2, #0]
 6b2:	e001      	b.n	6b8 <UARTInit+0x88>
  regVal = LPC_UART->LSR;

  /* Ensure a clean start, no data in either TX or RX FIFO. */
// CodeRed - added parentheses around comparison in operand of &
  while (( LPC_UART->LSR & (LSR_THRE|LSR_TEMT)) != (LSR_THRE|LSR_TEMT) );
  while ( LPC_UART->LSR & LSR_RDR )
 6b4:	4a0a      	ldr	r2, [pc, #40]	; (6e0 <UARTInit+0xb0>)
 6b6:	2301      	movs	r3, #1
 6b8:	6961      	ldr	r1, [r4, #20]
 6ba:	4219      	tst	r1, r3
 6bc:	d1f8      	bne.n	6b0 <UARTInit+0x80>

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 6be:	4b0e      	ldr	r3, [pc, #56]	; (6f8 <UARTInit+0xc8>)
 6c0:	2280      	movs	r2, #128	; 0x80
 6c2:	0392      	lsls	r2, r2, #14
 6c4:	601a      	str	r2, [r3, #0]

#if CONFIG_UART_ENABLE_INTERRUPT==1
#if CONFIG_UART_ENABLE_TX_INTERRUPT==1
  LPC_UART->IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART interrupt */
#else
  LPC_UART->IER = IER_RBR | IER_RLS;	/* Enable UART interrupt */
 6c6:	4b06      	ldr	r3, [pc, #24]	; (6e0 <UARTInit+0xb0>)
 6c8:	2205      	movs	r2, #5
 6ca:	605a      	str	r2, [r3, #4]
#endif
#endif
  return;
}
 6cc:	bd70      	pop	{r4, r5, r6, pc}
 6ce:	46c0      	nop			; (mov r8, r8)
 6d0:	10000000 	.word	0x10000000
 6d4:	1000001c 	.word	0x1000001c
 6d8:	e000e104 	.word	0xe000e104
 6dc:	400440a4 	.word	0x400440a4
 6e0:	40008000 	.word	0x40008000
 6e4:	400440a8 	.word	0x400440a8
 6e8:	40048004 	.word	0x40048004
 6ec:	40048098 	.word	0x40048098
 6f0:	40048000 	.word	0x40048000
 6f4:	10000004 	.word	0x10000004
 6f8:	e000e100 	.word	0xe000e100

000006fc <UARTSend>:
** parameters:		buffer pointer, and data length
** Returned value:	None
** 
*****************************************************************************/
void UARTSend(uint8_t *BufferPtr, uint32_t Length)
{
 6fc:	b530      	push	{r4, r5, lr}
	  /* Below flag is set inside the interrupt handler when THRE occurs. */
      while ( !(UARTTxEmpty & 0x01) );
	  LPC_UART->THR = *BufferPtr;
      UARTTxEmpty = 0;	/* not empty in the THR until it shifts out */
#else
	  while ( !(LPC_UART->LSR & LSR_THRE) );
 6fe:	4a07      	ldr	r2, [pc, #28]	; (71c <UARTSend+0x20>)
 700:	2320      	movs	r3, #32
** 
*****************************************************************************/
void UARTSend(uint8_t *BufferPtr, uint32_t Length)
{
  
  while ( Length != 0 )
 702:	e007      	b.n	714 <UARTSend+0x18>
	  /* Below flag is set inside the interrupt handler when THRE occurs. */
      while ( !(UARTTxEmpty & 0x01) );
	  LPC_UART->THR = *BufferPtr;
      UARTTxEmpty = 0;	/* not empty in the THR until it shifts out */
#else
	  while ( !(LPC_UART->LSR & LSR_THRE) );
 704:	6954      	ldr	r4, [r2, #20]
 706:	421c      	tst	r4, r3
 708:	d0fc      	beq.n	704 <UARTSend+0x8>
	  LPC_UART->THR = *BufferPtr;
 70a:	7805      	ldrb	r5, [r0, #0]
 70c:	4c03      	ldr	r4, [pc, #12]	; (71c <UARTSend+0x20>)
#endif
      BufferPtr++;
 70e:	3001      	adds	r0, #1
      while ( !(UARTTxEmpty & 0x01) );
	  LPC_UART->THR = *BufferPtr;
      UARTTxEmpty = 0;	/* not empty in the THR until it shifts out */
#else
	  while ( !(LPC_UART->LSR & LSR_THRE) );
	  LPC_UART->THR = *BufferPtr;
 710:	6025      	str	r5, [r4, #0]
#endif
      BufferPtr++;
      Length--;
 712:	3901      	subs	r1, #1
** 
*****************************************************************************/
void UARTSend(uint8_t *BufferPtr, uint32_t Length)
{
  
  while ( Length != 0 )
 714:	2900      	cmp	r1, #0
 716:	d1f5      	bne.n	704 <UARTSend+0x8>
#endif
      BufferPtr++;
      Length--;
  }
  return;
}
 718:	bd30      	pop	{r4, r5, pc}
 71a:	46c0      	nop			; (mov r8, r8)
 71c:	40008000 	.word	0x40008000

00000720 <SystemInit>:
 *
 * @brief  Setup the microcontroller system.
 *         Initialize the System.
 */
void SystemInit (void)
{
 720:	b510      	push	{r4, lr}
#if (CLOCK_SETUP)                                 /* Clock Setup              */
#if (SYSCLK_SETUP)                                /* System Clock Setup       */
#if (SYSOSC_SETUP)                                /* System Oscillator Setup  */
  uint32_t i;

  LPC_SYSCON->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
 722:	4b1d      	ldr	r3, [pc, #116]	; (798 <SystemInit+0x78>)
 724:	228e      	movs	r2, #142	; 0x8e
 726:	0092      	lsls	r2, r2, #2
 728:	5899      	ldr	r1, [r3, r2]
 72a:	2020      	movs	r0, #32
 72c:	4381      	bics	r1, r0
 72e:	5099      	str	r1, [r3, r2]
  LPC_SYSCON->SYSOSCCTRL    = SYSOSCCTRL_Val;
 730:	2200      	movs	r2, #0
 732:	621a      	str	r2, [r3, #32]
 734:	22c8      	movs	r2, #200	; 0xc8

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 736:	46c0      	nop			; (mov r8, r8)
 738:	3a01      	subs	r2, #1
  for (i = 0; i < 200; i++) __NOP();
 73a:	2a00      	cmp	r2, #0
 73c:	d1fb      	bne.n	736 <SystemInit+0x16>
  LPC_SYSCON->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
  LPC_SYSCON->SYSPLLCLKUEN  = 0x01;               /* Update Clock Source      */
 73e:	2101      	movs	r1, #1
  uint32_t i;

  LPC_SYSCON->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
  LPC_SYSCON->SYSOSCCTRL    = SYSOSCCTRL_Val;
  for (i = 0; i < 200; i++) __NOP();
  LPC_SYSCON->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
 740:	641a      	str	r2, [r3, #64]	; 0x40
  LPC_SYSCON->SYSPLLCLKUEN  = 0x01;               /* Update Clock Source      */
 742:	6459      	str	r1, [r3, #68]	; 0x44
  LPC_SYSCON->SYSPLLCLKUEN  = 0x00;               /* Toggle Update Register   */
 744:	645a      	str	r2, [r3, #68]	; 0x44
  LPC_SYSCON->SYSPLLCLKUEN  = 0x01;
 746:	6459      	str	r1, [r3, #68]	; 0x44
  while (!(LPC_SYSCON->SYSPLLCLKUEN & 0x01));     /* Wait Until Updated       */
 748:	6c58      	ldr	r0, [r3, #68]	; 0x44
 74a:	4a13      	ldr	r2, [pc, #76]	; (798 <SystemInit+0x78>)
 74c:	4208      	tst	r0, r1
 74e:	d0fb      	beq.n	748 <SystemInit+0x28>
#if (SYSPLL_SETUP)                                /* System PLL Setup         */
  LPC_SYSCON->SYSPLLCTRL    = SYSPLLCTRL_Val;
 750:	2123      	movs	r1, #35	; 0x23
 752:	6091      	str	r1, [r2, #8]
  LPC_SYSCON->PDRUNCFG     &= ~(1 << 7);          /* Power-up SYSPLL          */
 754:	218e      	movs	r1, #142	; 0x8e
 756:	0089      	lsls	r1, r1, #2
 758:	5850      	ldr	r0, [r2, r1]
 75a:	2480      	movs	r4, #128	; 0x80
 75c:	43a0      	bics	r0, r4
 75e:	5050      	str	r0, [r2, r1]
  while (!(LPC_SYSCON->SYSPLLSTAT & 0x01));	      /* Wait Until PLL Locked    */
 760:	2001      	movs	r0, #1
 762:	68dc      	ldr	r4, [r3, #12]
 764:	4a0c      	ldr	r2, [pc, #48]	; (798 <SystemInit+0x78>)
 766:	2101      	movs	r1, #1
 768:	4204      	tst	r4, r0
 76a:	d0fa      	beq.n	762 <SystemInit+0x42>
#endif
#if (WDTOSC_SETUP)                                /* Watchdog Oscillator Setup*/
  LPC_SYSCON->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCON->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCON->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
 76c:	2003      	movs	r0, #3
 76e:	6710      	str	r0, [r2, #112]	; 0x70
  LPC_SYSCON->MAINCLKUEN    = 0x01;               /* Update MCLK Clock Source */
  LPC_SYSCON->MAINCLKUEN    = 0x00;               /* Toggle Update Register   */
 770:	2000      	movs	r0, #0
#if (WDTOSC_SETUP)                                /* Watchdog Oscillator Setup*/
  LPC_SYSCON->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCON->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCON->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
  LPC_SYSCON->MAINCLKUEN    = 0x01;               /* Update MCLK Clock Source */
 772:	6751      	str	r1, [r2, #116]	; 0x74
  LPC_SYSCON->MAINCLKUEN    = 0x00;               /* Toggle Update Register   */
 774:	6750      	str	r0, [r2, #116]	; 0x74
  LPC_SYSCON->MAINCLKUEN    = 0x01;
 776:	6751      	str	r1, [r2, #116]	; 0x74
  while (!(LPC_SYSCON->MAINCLKUEN & 0x01));       /* Wait Until Updated       */
 778:	6f58      	ldr	r0, [r3, #116]	; 0x74
 77a:	2201      	movs	r2, #1
 77c:	4208      	tst	r0, r1
 77e:	d0fb      	beq.n	778 <SystemInit+0x58>
#endif

  LPC_SYSCON->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
 780:	4b05      	ldr	r3, [pc, #20]	; (798 <SystemInit+0x78>)
  LPC_SYSCON->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
 782:	4906      	ldr	r1, [pc, #24]	; (79c <SystemInit+0x7c>)
  LPC_SYSCON->MAINCLKUEN    = 0x00;               /* Toggle Update Register   */
  LPC_SYSCON->MAINCLKUEN    = 0x01;
  while (!(LPC_SYSCON->MAINCLKUEN & 0x01));       /* Wait Until Updated       */
#endif

  LPC_SYSCON->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
 784:	679a      	str	r2, [r3, #120]	; 0x78
  LPC_SYSCON->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
 786:	4b06      	ldr	r3, [pc, #24]	; (7a0 <SystemInit+0x80>)
 788:	67d9      	str	r1, [r3, #124]	; 0x7c
  LPC_SYSCON->SSP0CLKDIV    = SSP0CLKDIV_Val;
 78a:	4b06      	ldr	r3, [pc, #24]	; (7a4 <SystemInit+0x84>)
 78c:	601a      	str	r2, [r3, #0]
  LPC_SYSCON->UARTCLKDIV    = UARTCLKDIV_Val;
 78e:	4b06      	ldr	r3, [pc, #24]	; (7a8 <SystemInit+0x88>)
 790:	601a      	str	r2, [r3, #0]
  LPC_SYSCON->SSP1CLKDIV    = SSP1CLKDIV_Val;
 792:	4b06      	ldr	r3, [pc, #24]	; (7ac <SystemInit+0x8c>)
 794:	601a      	str	r2, [r3, #0]


#if (MEMMAP_SETUP || MEMMAP_INIT)       /* Memory Mapping Setup               */
  LPC_SYSCON->SYSMEMREMAP = SYSMEMREMAP_Val;
#endif
}
 796:	bd10      	pop	{r4, pc}
 798:	40048000 	.word	0x40048000
 79c:	0001005f 	.word	0x0001005f
 7a0:	40048004 	.word	0x40048004
 7a4:	40048094 	.word	0x40048094
 7a8:	40048098 	.word	0x40048098
 7ac:	4004809c 	.word	0x4004809c

000007b0 <__weak_main>:
 7b0:	b508      	push	{r3, lr}
 7b2:	f7ff fe7f 	bl	4b4 <main>
 7b6:	bd08      	pop	{r3, pc}

000007b8 <__aeabi_uidiv>:
 7b8:	2900      	cmp	r1, #0
 7ba:	d031      	beq.n	820 <idiv_divzero>
 7bc:	2201      	movs	r2, #1
 7be:	07d2      	lsls	r2, r2, #31
 7c0:	0903      	lsrs	r3, r0, #4
 7c2:	e001      	b.n	7c8 <div_search4a>

000007c4 <div_search4>:
 7c4:	0109      	lsls	r1, r1, #4
 7c6:	0912      	lsrs	r2, r2, #4

000007c8 <div_search4a>:
 7c8:	4299      	cmp	r1, r3
 7ca:	d9fb      	bls.n	7c4 <div_search4>
 7cc:	0843      	lsrs	r3, r0, #1
 7ce:	e001      	b.n	7d4 <div_search1a>

000007d0 <div_search1>:
 7d0:	0049      	lsls	r1, r1, #1
 7d2:	0852      	lsrs	r2, r2, #1

000007d4 <div_search1a>:
 7d4:	4299      	cmp	r1, r3
 7d6:	d9fb      	bls.n	7d0 <div_search1>
 7d8:	e000      	b.n	7dc <div_loop1a>

000007da <div_loop1>:
 7da:	0849      	lsrs	r1, r1, #1

000007dc <div_loop1a>:
 7dc:	1a40      	subs	r0, r0, r1
 7de:	d307      	bcc.n	7f0 <div1>

000007e0 <div2>:
 7e0:	4152      	adcs	r2, r2
 7e2:	d3fa      	bcc.n	7da <div_loop1>
 7e4:	4601      	mov	r1, r0
 7e6:	4610      	mov	r0, r2
 7e8:	4770      	bx	lr

000007ea <div_loop2>:
 7ea:	0849      	lsrs	r1, r1, #1
 7ec:	1840      	adds	r0, r0, r1
 7ee:	d2f7      	bcs.n	7e0 <div2>

000007f0 <div1>:
 7f0:	1892      	adds	r2, r2, r2
 7f2:	d3fa      	bcc.n	7ea <div_loop2>
 7f4:	1840      	adds	r0, r0, r1
 7f6:	4601      	mov	r1, r0
 7f8:	4610      	mov	r0, r2
 7fa:	4770      	bx	lr

000007fc <idiv_negative>:
 7fc:	0fcb      	lsrs	r3, r1, #31
 7fe:	d000      	beq.n	802 <idiv_neg1>
 800:	4249      	negs	r1, r1

00000802 <idiv_neg1>:
 802:	1002      	asrs	r2, r0, #32
 804:	d500      	bpl.n	808 <idiv_neg2>
 806:	4240      	negs	r0, r0

00000808 <idiv_neg2>:
 808:	4053      	eors	r3, r2
 80a:	b508      	push	{r3, lr}
 80c:	f7ff ffd4 	bl	7b8 <__aeabi_uidiv>
 810:	bc0c      	pop	{r2, r3}

00000812 <idiv_sign>:
 812:	1052      	asrs	r2, r2, #1
 814:	d300      	bcc.n	818 <idiv_sign1>
 816:	4240      	negs	r0, r0

00000818 <idiv_sign1>:
 818:	2a00      	cmp	r2, #0
 81a:	d500      	bpl.n	81e <idiv_ret>
 81c:	4249      	negs	r1, r1

0000081e <idiv_ret>:
 81e:	4718      	bx	r3

00000820 <idiv_divzero>:
 820:	46f4      	mov	ip, lr
 822:	2000      	movs	r0, #0
 824:	f000 f801 	bl	82a <__aeabi_idiv0>
 828:	4760      	bx	ip

0000082a <__aeabi_idiv0>:
 82a:	4770      	bx	lr

0000082c <LEDcurve>:
 82c:	ffff b504 7fff 5a82 3fff 2d41 2000 16a0     .......Z.?A-. ..
 83c:	1000 0b50 07ff 05a8 0400 02d4 0200 016a     ..P...........j.
 84c:	0100 00b5 007f 005a 0040 002d 0020 0017     ......Z.@.-. ...
 85c:	0010 000b 0008 0006 0004 0003 0002 0001     ................
 86c:	0001 ffff                                   ....
